{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioType = exports.LocationType = exports.GeocodingAddressComponentType = exports.VehicleType = exports.Maneuver = exports.AddressType = exports.GeocodedWaypointStatus = exports.DirectionsReponseStatus = exports.DirectionsResponseStatus = exports.TransitRoutingPreference = exports.TransitMode = exports.TrafficModel = exports.UnitSystem = exports.TravelRestriction = exports.TravelMode = exports.Language = exports.AspectRatingType = exports.PlaceType2 = exports.PlaceType1 = exports.PlaceInputType = exports.PlaceIdScope = exports.Status = void 0;\nvar Status;\n(function (Status) {\n  /** indicates the response contains a valid result. */\n  Status[\"OK\"] = \"OK\";\n  /** indicates that the provided request was invalid. */\n  Status[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  Status[\"MAX_WAYPOINTS_EXCEEDED\"] = \"MAX_WAYPOINTS_EXCEEDED\";\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  Status[\"MAX_ROUTE_LENGTH_EXCEEDED\"] = \"MAX_ROUTE_LENGTH_EXCEEDED\";\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  Status[\"OVER_DAILY_LIMIT\"] = \"OVER_DAILY_LIMIT\";\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  Status[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n  /** indicates that the service denied use of the Distance Matrix service by your application. */\n  Status[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n  /** indicates a Distance Matrix request could not be processed due to a server error. The request may succeed if you try again. */\n  Status[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  /** indicates that the request was successful but returned no results. */\n  Status[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n  /** indicates that the referenced location (place_id) was not found in the Places database. */\n  Status[\"NOT_FOUND\"] = \"NOT_FOUND\";\n})(Status = exports.Status || (exports.Status = {}));\nvar PlaceIdScope;\n(function (PlaceIdScope) {\n  /**\n   * The place ID is recognised by your application only.\n   * This is because your application added the place, and the place has not yet passed the moderation process.\n   */\n  PlaceIdScope[\"APP\"] = \"APP\";\n  /** The place ID is available to other applications and on Google Maps. */\n  PlaceIdScope[\"GOOGLE\"] = \"GOOGLE\";\n})(PlaceIdScope = exports.PlaceIdScope || (exports.PlaceIdScope = {}));\nvar PlaceInputType;\n(function (PlaceInputType) {\n  PlaceInputType[\"textQuery\"] = \"textquery\";\n  PlaceInputType[\"phoneNumber\"] = \"phonenumber\";\n})(PlaceInputType = exports.PlaceInputType || (exports.PlaceInputType = {}));\n/**\n * Table 1: Types supported in place search and addition\n *\n * You can use the following values in the types filter for place searches and when adding a place.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table1\n */\nvar PlaceType1;\n(function (PlaceType1) {\n  PlaceType1[\"accounting\"] = \"accounting\";\n  /** indicates an airport. */\n  PlaceType1[\"airport\"] = \"airport\";\n  PlaceType1[\"amusement_park\"] = \"amusement_park\";\n  PlaceType1[\"aquarium\"] = \"aquarium\";\n  PlaceType1[\"art_gallery\"] = \"art_gallery\";\n  PlaceType1[\"atm\"] = \"atm\";\n  PlaceType1[\"bakery\"] = \"bakery\";\n  PlaceType1[\"bank\"] = \"bank\";\n  PlaceType1[\"bar\"] = \"bar\";\n  PlaceType1[\"beauty_salon\"] = \"beauty_salon\";\n  PlaceType1[\"bicycle_store\"] = \"bicycle_store\";\n  PlaceType1[\"book_store\"] = \"book_store\";\n  PlaceType1[\"bowling_alley\"] = \"bowling_alley\";\n  PlaceType1[\"bus_station\"] = \"bus_station\";\n  PlaceType1[\"cafe\"] = \"cafe\";\n  PlaceType1[\"campground\"] = \"campground\";\n  PlaceType1[\"car_dealer\"] = \"car_dealer\";\n  PlaceType1[\"car_rental\"] = \"car_rental\";\n  PlaceType1[\"car_repair\"] = \"car_repair\";\n  PlaceType1[\"car_wash\"] = \"car_wash\";\n  PlaceType1[\"casino\"] = \"casino\";\n  PlaceType1[\"cemetery\"] = \"cemetery\";\n  PlaceType1[\"church\"] = \"church\";\n  PlaceType1[\"city_hall\"] = \"city_hall\";\n  PlaceType1[\"clothing_store\"] = \"clothing_store\";\n  PlaceType1[\"convenience_store\"] = \"convenience_store\";\n  PlaceType1[\"courthouse\"] = \"courthouse\";\n  PlaceType1[\"dentist\"] = \"dentist\";\n  PlaceType1[\"department_store\"] = \"department_store\";\n  PlaceType1[\"doctor\"] = \"doctor\";\n  PlaceType1[\"drugstore\"] = \"drugstore\";\n  PlaceType1[\"electrician\"] = \"electrician\";\n  PlaceType1[\"electronics_store\"] = \"electronics_store\";\n  PlaceType1[\"embassy\"] = \"embassy\";\n  PlaceType1[\"fire_station\"] = \"fire_station\";\n  PlaceType1[\"florist\"] = \"florist\";\n  PlaceType1[\"funeral_home\"] = \"funeral_home\";\n  PlaceType1[\"furniture_store\"] = \"furniture_store\";\n  PlaceType1[\"gas_station\"] = \"gas_station\";\n  PlaceType1[\"gym\"] = \"gym\";\n  PlaceType1[\"hair_care\"] = \"hair_care\";\n  PlaceType1[\"hardware_store\"] = \"hardware_store\";\n  PlaceType1[\"hindu_temple\"] = \"hindu_temple\";\n  PlaceType1[\"home_goods_store\"] = \"home_goods_store\";\n  PlaceType1[\"hospital\"] = \"hospital\";\n  PlaceType1[\"insurance_agency\"] = \"insurance_agency\";\n  PlaceType1[\"jewelry_store\"] = \"jewelry_store\";\n  PlaceType1[\"laundry\"] = \"laundry\";\n  PlaceType1[\"lawyer\"] = \"lawyer\";\n  PlaceType1[\"library\"] = \"library\";\n  PlaceType1[\"light_rail_station\"] = \"light_rail_station\";\n  PlaceType1[\"liquor_store\"] = \"liquor_store\";\n  PlaceType1[\"local_government_office\"] = \"local_government_office\";\n  PlaceType1[\"locksmith\"] = \"locksmith\";\n  PlaceType1[\"lodging\"] = \"lodging\";\n  PlaceType1[\"meal_delivery\"] = \"meal_delivery\";\n  PlaceType1[\"meal_takeaway\"] = \"meal_takeaway\";\n  PlaceType1[\"mosque\"] = \"mosque\";\n  PlaceType1[\"movie_rental\"] = \"movie_rental\";\n  PlaceType1[\"movie_theater\"] = \"movie_theater\";\n  PlaceType1[\"moving_company\"] = \"moving_company\";\n  PlaceType1[\"museum\"] = \"museum\";\n  PlaceType1[\"night_club\"] = \"night_club\";\n  PlaceType1[\"painter\"] = \"painter\";\n  /** indicates a named park. */\n  PlaceType1[\"park\"] = \"park\";\n  PlaceType1[\"parking\"] = \"parking\";\n  PlaceType1[\"pet_store\"] = \"pet_store\";\n  PlaceType1[\"pharmacy\"] = \"pharmacy\";\n  PlaceType1[\"physiotherapist\"] = \"physiotherapist\";\n  PlaceType1[\"plumber\"] = \"plumber\";\n  PlaceType1[\"police\"] = \"police\";\n  PlaceType1[\"post_office\"] = \"post_office\";\n  PlaceType1[\"real_estate_agency\"] = \"real_estate_agency\";\n  PlaceType1[\"restaurant\"] = \"restaurant\";\n  PlaceType1[\"roofing_contractor\"] = \"roofing_contractor\";\n  PlaceType1[\"rv_park\"] = \"rv_park\";\n  PlaceType1[\"school\"] = \"school\";\n  PlaceType1[\"secondary_school\"] = \"secondary_school\";\n  PlaceType1[\"shoe_store\"] = \"shoe_store\";\n  PlaceType1[\"shopping_mall\"] = \"shopping_mall\";\n  PlaceType1[\"spa\"] = \"spa\";\n  PlaceType1[\"stadium\"] = \"stadium\";\n  PlaceType1[\"storage\"] = \"storage\";\n  PlaceType1[\"store\"] = \"store\";\n  PlaceType1[\"subway_station\"] = \"subway_station\";\n  PlaceType1[\"supermarket\"] = \"supermarket\";\n  PlaceType1[\"synagogue\"] = \"synagogue\";\n  PlaceType1[\"taxi_stand\"] = \"taxi_stand\";\n  PlaceType1[\"tourist_attraction\"] = \"tourist_attraction\";\n  PlaceType1[\"train_station\"] = \"train_station\";\n  PlaceType1[\"transit_station\"] = \"transit_station\";\n  PlaceType1[\"travel_agency\"] = \"travel_agency\";\n  PlaceType1[\"university\"] = \"university\";\n  PlaceType1[\"veterinary_care\"] = \"veterinary_care\";\n  PlaceType1[\"zoo\"] = \"zoo\";\n})(PlaceType1 = exports.PlaceType1 || (exports.PlaceType1 = {}));\n/**\n * Table 2: Additional types returned by the Places service\n *\n * The following types may be returned in the results of a place search, in addition to the types in table 1 above.\n * For more details on these types, refer to [Address Types](https://developers.google.com/maps/documentation/geocoding/intro#Types)\n * in Geocoding Responses.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table2\n */\nvar PlaceType2;\n(function (PlaceType2) {\n  /**\n   * indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states.\n   * Not all nations exhibit these administrative levels. In most cases, `administrative_area_level_1` short names will closely match\n   * ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based\n   * on a variety of signals and location data.\n   */\n  PlaceType2[\"administrative_area_level_1\"] = \"administrative_area_level_1\";\n  /**\n   * indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties.\n   * Not all nations exhibit these administrative levels.\n   */\n  PlaceType2[\"administrative_area_level_2\"] = \"administrative_area_level_2\";\n  /**\n   * indicates a third-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  PlaceType2[\"administrative_area_level_3\"] = \"administrative_area_level_3\";\n  /**\n   * indicates a fourth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  PlaceType2[\"administrative_area_level_4\"] = \"administrative_area_level_4\";\n  /**\n   * indicates a fifth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  PlaceType2[\"administrative_area_level_5\"] = \"administrative_area_level_5\";\n  PlaceType2[\"archipelago\"] = \"archipelago\";\n  /** indicates a commonly-used alternative name for the entity. */\n  PlaceType2[\"colloquial_area\"] = \"colloquial_area\";\n  PlaceType2[\"continent\"] = \"continent\";\n  /** indicates the national political entity, and is typically the highest order type returned by the Geocoder. */\n  PlaceType2[\"country\"] = \"country\";\n  PlaceType2[\"establishment\"] = \"establishment\";\n  PlaceType2[\"finance\"] = \"finance\";\n  PlaceType2[\"floor\"] = \"floor\";\n  PlaceType2[\"food\"] = \"food\";\n  PlaceType2[\"general_contractor\"] = \"general_contractor\";\n  PlaceType2[\"geocode\"] = \"geocode\";\n  PlaceType2[\"health\"] = \"health\";\n  /** indicates a major intersection, usually of two major roads. */\n  PlaceType2[\"intersection\"] = \"intersection\";\n  PlaceType2[\"landmark\"] = \"landmark\";\n  /** indicates an incorporated city or town political entity. */\n  PlaceType2[\"locality\"] = \"locality\";\n  /** indicates a prominent natural feature. */\n  PlaceType2[\"natural_feature\"] = \"natural_feature\";\n  /** indicates a named neighborhood */\n  PlaceType2[\"neighborhood\"] = \"neighborhood\";\n  PlaceType2[\"place_of_worship\"] = \"place_of_worship\";\n  PlaceType2[\"plus_code\"] = \"plus_code\";\n  PlaceType2[\"point_of_interest\"] = \"point_of_interest\";\n  /** indicates a political entity. Usually, this type indicates a polygon of some civil administration. */\n  PlaceType2[\"political\"] = \"political\";\n  PlaceType2[\"post_box\"] = \"post_box\";\n  /** indicates a postal code as used to address postal mail within the country. */\n  PlaceType2[\"postal_code\"] = \"postal_code\";\n  PlaceType2[\"postal_code_prefix\"] = \"postal_code_prefix\";\n  PlaceType2[\"postal_code_suffix\"] = \"postal_code_suffix\";\n  PlaceType2[\"postal_town\"] = \"postal_town\";\n  /** indicates a named location, usually a building or collection of buildings with a common name */\n  PlaceType2[\"premise\"] = \"premise\";\n  PlaceType2[\"room\"] = \"room\";\n  /** indicates a named route (such as \"US 101\"). */\n  PlaceType2[\"route\"] = \"route\";\n  PlaceType2[\"street_address\"] = \"street_address\";\n  PlaceType2[\"street_number\"] = \"street_number\";\n  /**\n   * indicates a first-order civil entity below a locality. For some locations may receive one of the additional types:\n   * `sublocality_level_1` to `sublocality_level_5`. Each sublocality level is a civil entity. Larger numbers indicate a smaller\n   * geographic area.\n   */\n  PlaceType2[\"sublocality\"] = \"sublocality\";\n  PlaceType2[\"sublocality_level_1\"] = \"sublocality_level_1\";\n  PlaceType2[\"sublocality_level_2\"] = \"sublocality_level_2\";\n  PlaceType2[\"sublocality_level_3\"] = \"sublocality_level_3\";\n  PlaceType2[\"sublocality_level_4\"] = \"sublocality_level_4\";\n  PlaceType2[\"sublocality_level_5\"] = \"sublocality_level_5\";\n  /**\n   * indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a\n   * common name.\n   */\n  PlaceType2[\"subpremise\"] = \"subpremise\";\n  PlaceType2[\"town_square\"] = \"town_square\";\n})(PlaceType2 = exports.PlaceType2 || (exports.PlaceType2 = {}));\nvar AspectRatingType;\n(function (AspectRatingType) {\n  AspectRatingType[\"appeal\"] = \"appeal\";\n  AspectRatingType[\"atmosphere\"] = \"atmosphere\";\n  AspectRatingType[\"decor\"] = \"decor\";\n  AspectRatingType[\"facilities\"] = \"facilities\";\n  AspectRatingType[\"food\"] = \"food\";\n  AspectRatingType[\"overall\"] = \"overall\";\n  AspectRatingType[\"quality\"] = \"quality\";\n  AspectRatingType[\"service\"] = \"service\";\n})(AspectRatingType = exports.AspectRatingType || (exports.AspectRatingType = {}));\n/**\n * By default the API will attempt to load the most appropriate language based on the users location or browser settings.\n * Some APIs allow you to explicitly set a language when you make a request\n *\n * @see https://developers.google.com/maps/faq#languagesupport\n */\nvar Language;\n(function (Language) {\n  /** Arabic */\n  Language[\"ar\"] = \"ar\";\n  /** Belarusian */\n  Language[\"be\"] = \"be\";\n  /** Bulgarian */\n  Language[\"bg\"] = \"bg\";\n  /** Bengali */\n  Language[\"bn\"] = \"bn\";\n  /** Catalan */\n  Language[\"ca\"] = \"ca\";\n  /** Czech */\n  Language[\"cs\"] = \"cs\";\n  /** Danish */\n  Language[\"da\"] = \"da\";\n  /** German */\n  Language[\"de\"] = \"de\";\n  /** Greek */\n  Language[\"el\"] = \"el\";\n  /** English */\n  Language[\"en\"] = \"en\";\n  /** English (Australian) */\n  Language[\"en_Au\"] = \"en-Au\";\n  /** English (Great Britain) */\n  Language[\"en_GB\"] = \"en-GB\";\n  /** Spanish */\n  Language[\"es\"] = \"es\";\n  /** Basque */\n  Language[\"eu\"] = \"eu\";\n  /** Farsi */\n  Language[\"fa\"] = \"fa\";\n  /** Finnish */\n  Language[\"fi\"] = \"fi\";\n  /** Filipino */\n  Language[\"fil\"] = \"fil\";\n  /** French */\n  Language[\"fr\"] = \"fr\";\n  /** Galician */\n  Language[\"gl\"] = \"gl\";\n  /** Gujarati */\n  Language[\"gu\"] = \"gu\";\n  /** Hindi */\n  Language[\"hi\"] = \"hi\";\n  /** Croatian */\n  Language[\"hr\"] = \"hr\";\n  /** Hungarian */\n  Language[\"hu\"] = \"hu\";\n  /** Indonesian */\n  Language[\"id\"] = \"id\";\n  /** Italian */\n  Language[\"it\"] = \"it\";\n  /** Hebrew */\n  Language[\"iw\"] = \"iw\";\n  /** Japanese */\n  Language[\"ja\"] = \"ja\";\n  /** Kazakh */\n  Language[\"kk\"] = \"kk\";\n  /** Kannada */\n  Language[\"kn\"] = \"kn\";\n  /** Korean */\n  Language[\"ko\"] = \"ko\";\n  /** Kyrgyz */\n  Language[\"ky\"] = \"ky\";\n  /** Lithuanian */\n  Language[\"lt\"] = \"lt\";\n  /** Latvian */\n  Language[\"lv\"] = \"lv\";\n  /** Macedonian */\n  Language[\"mk\"] = \"mk\";\n  /** Malayalam */\n  Language[\"ml\"] = \"ml\";\n  /** Marathi */\n  Language[\"mr\"] = \"mr\";\n  /** Burmese */\n  Language[\"my\"] = \"my\";\n  /** Dutch */\n  Language[\"nl\"] = \"nl\";\n  /** Norwegian */\n  Language[\"no\"] = \"no\";\n  /** Punjabi */\n  Language[\"pa\"] = \"pa\";\n  /** Polish */\n  Language[\"pl\"] = \"pl\";\n  /** Portuguese */\n  Language[\"pt\"] = \"pt\";\n  /** Portuguese (Brazil) */\n  Language[\"pt_BR\"] = \"pt-BR\";\n  /** Portuguese (Portugal) */\n  Language[\"pt_PT\"] = \"pt-PT\";\n  /** Romanian */\n  Language[\"ro\"] = \"ro\";\n  /** Russian */\n  Language[\"ru\"] = \"ru\";\n  /** Slovak */\n  Language[\"sk\"] = \"sk\";\n  /** Slovenian */\n  Language[\"sl\"] = \"sl\";\n  /** Albanian */\n  Language[\"sq\"] = \"sq\";\n  /** Serbian */\n  Language[\"sr\"] = \"sr\";\n  /** Swedish */\n  Language[\"sv\"] = \"sv\";\n  /** Tamil */\n  Language[\"ta\"] = \"ta\";\n  /** Telugu */\n  Language[\"te\"] = \"te\";\n  /** Thai */\n  Language[\"th\"] = \"th\";\n  /** Tagalog */\n  Language[\"tl\"] = \"tl\";\n  /** Turkish */\n  Language[\"tr\"] = \"tr\";\n  /** Ukrainian */\n  Language[\"uk\"] = \"uk\";\n  /** Uzbek */\n  Language[\"uz\"] = \"uz\";\n  /** Vietnamese */\n  Language[\"vi\"] = \"vi\";\n  /** Chinese (Simlified) */\n  Language[\"zh_CN\"] = \"zh-CN\";\n  /** Chinese (Traditional) */\n  Language[\"zh_TW\"] = \"zh-TW\";\n})(Language = exports.Language || (exports.Language = {}));\n/**\n * When you calculate directions, you may specify the transportation mode to use.\n * By default, directions are calculated as `driving` directions.\n *\n * **Note:** Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths,\n * so these directions will return warnings in the returned result which you must display to the user.\n */\nvar TravelMode;\n(function (TravelMode) {\n  /** (default) indicates standard driving directions using the road network. */\n  TravelMode[\"driving\"] = \"driving\";\n  /** requests walking directions via pedestrian paths & sidewalks (where available). */\n  TravelMode[\"walking\"] = \"walking\";\n  /** requests bicycling directions via bicycle paths & preferred streets (where available). */\n  TravelMode[\"bicycling\"] = \"bicycling\";\n  /**\n   * requests directions via public transit routes (where available).\n   * If you set the mode to transit, you can optionally specify either a departure_time or an arrival_time.\n   * If neither time is specified, the departure_time defaults to now (that is, the departure time defaults to the current time).\n   * You can also optionally include a transit_mode and/or a transit_routing_preference.\n   */\n  TravelMode[\"transit\"] = \"transit\";\n})(TravelMode = exports.TravelMode || (exports.TravelMode = {}));\nvar TravelRestriction;\n(function (TravelRestriction) {\n  /** indicates that the calculated route should avoid toll roads/bridges. */\n  TravelRestriction[\"tolls\"] = \"tolls\";\n  /** indicates that the calculated route should avoid highways. */\n  TravelRestriction[\"highways\"] = \"highways\";\n  /** indicates that the calculated route should avoid ferries. */\n  TravelRestriction[\"ferries\"] = \"ferries\";\n  /**\n   * indicates that the calculated route should avoid indoor steps for walking and transit directions.\n   * Only requests that include an API key or a Google Maps APIs Premium Plan client ID will receive indoor steps by default.\n   */\n  TravelRestriction[\"indoor\"] = \"indoor\";\n})(TravelRestriction = exports.TravelRestriction || (exports.TravelRestriction = {}));\n/**\n * Directions results contain text within distance fields that may be displayed to the user to indicate the distance of\n * a particular \"step\" of the route. By default, this text uses the unit system of the origin's country or region.\n */\nvar UnitSystem;\n(function (UnitSystem) {\n  /** specifies usage of the metric system. Textual distances are returned using kilometers and meters. */\n  UnitSystem[\"metric\"] = \"metric\";\n  /** specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet. */\n  UnitSystem[\"imperial\"] = \"imperial\";\n})(UnitSystem = exports.UnitSystem || (exports.UnitSystem = {}));\nvar TrafficModel;\n(function (TrafficModel) {\n  /**\n   * indicates that the returned `duration_in_traffic` should be the best estimate of travel time given what is known about\n   * both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n   */\n  TrafficModel[\"best_guess\"] = \"best_guess\";\n  /**\n   * indicates that the returned `duration_in_traffic` should be longer than the actual travel time on most days,\n   * though occasional days with particularly bad traffic conditions may exceed this value.\n   */\n  TrafficModel[\"pessimistic\"] = \"pessimistic\";\n  /**\n   * indicates that the returned `duration_in_traffic` should be shorter than the actual travel time on most days,\n   * though occasional days with particularly good traffic conditions may be faster than this value.\n   */\n  TrafficModel[\"optimistic\"] = \"optimistic\";\n})(TrafficModel = exports.TrafficModel || (exports.TrafficModel = {}));\nvar TransitMode;\n(function (TransitMode) {\n  /** indicates that the calculated route should prefer travel by bus. */\n  TransitMode[\"bus\"] = \"bus\";\n  /** indicates that the calculated route should prefer travel by subway. */\n  TransitMode[\"subway\"] = \"subway\";\n  /** indicates that the calculated route should prefer travel by train. */\n  TransitMode[\"train\"] = \"train\";\n  /** indicates that the calculated route should prefer travel by tram and light rail. */\n  TransitMode[\"tram\"] = \"tram\";\n  /**\n   * indicates that the calculated route should prefer travel by train, tram, light rail, and subway.\n   * This is equivalent to `transit_mode=train|tram|subway`\n   */\n  TransitMode[\"rail\"] = \"rail\";\n})(TransitMode = exports.TransitMode || (exports.TransitMode = {}));\nvar TransitRoutingPreference;\n(function (TransitRoutingPreference) {\n  /** indicates that the calculated route should prefer limited amounts of walking. */\n  TransitRoutingPreference[\"less_walking\"] = \"less_walking\";\n  /** indicates that the calculated route should prefer a limited number of transfers. */\n  TransitRoutingPreference[\"fewer_transfers\"] = \"fewer_transfers\";\n})(TransitRoutingPreference = exports.TransitRoutingPreference || (exports.TransitRoutingPreference = {}));\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n */\nvar DirectionsResponseStatus;\n(function (DirectionsResponseStatus) {\n  /** indicates the response contains a valid `result`. */\n  DirectionsResponseStatus[\"OK\"] = \"OK\";\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  DirectionsResponseStatus[\"NOT_FOUND\"] = \"NOT_FOUND\";\n  /** indicates no route could be found between the origin and destination. */\n  DirectionsResponseStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  DirectionsResponseStatus[\"MAX_WAYPOINTS_EXCEEDED\"] = \"MAX_WAYPOINTS_EXCEEDED\";\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  DirectionsResponseStatus[\"MAX_ROUTE_LENGTH_EXCEEDED\"] = \"MAX_ROUTE_LENGTH_EXCEEDED\";\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  DirectionsResponseStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  DirectionsResponseStatus[\"OVER_DAILY_LIMIT\"] = \"OVER_DAILY_LIMIT\";\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  DirectionsResponseStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n  /** indicates that the service denied use of the directions service by your application. */\n  DirectionsResponseStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  DirectionsResponseStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n})(DirectionsResponseStatus = exports.DirectionsResponseStatus || (exports.DirectionsResponseStatus = {}));\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n * @deprecated\n */\nvar DirectionsReponseStatus;\n(function (DirectionsReponseStatus) {\n  /** indicates the response contains a valid `result`. */\n  DirectionsReponseStatus[\"OK\"] = \"OK\";\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  DirectionsReponseStatus[\"NOT_FOUND\"] = \"NOT_FOUND\";\n  /** indicates no route could be found between the origin and destination. */\n  DirectionsReponseStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  DirectionsReponseStatus[\"MAX_WAYPOINTS_EXCEEDED\"] = \"MAX_WAYPOINTS_EXCEEDED\";\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  DirectionsReponseStatus[\"MAX_ROUTE_LENGTH_EXCEEDED\"] = \"MAX_ROUTE_LENGTH_EXCEEDED\";\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  DirectionsReponseStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  DirectionsReponseStatus[\"OVER_DAILY_LIMIT\"] = \"OVER_DAILY_LIMIT\";\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  DirectionsReponseStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n  /** indicates that the service denied use of the directions service by your application. */\n  DirectionsReponseStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  DirectionsReponseStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n})(DirectionsReponseStatus = exports.DirectionsReponseStatus || (exports.DirectionsReponseStatus = {}));\nvar GeocodedWaypointStatus;\n(function (GeocodedWaypointStatus) {\n  /** indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned. */\n  GeocodedWaypointStatus[\"OK\"] = \"OK\";\n  /**\n   * indicates that the geocode was successful but returned no results.\n   * This may occur if the geocoder was passed a non-existent `address`.\n   */\n  GeocodedWaypointStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n})(GeocodedWaypointStatus = exports.GeocodedWaypointStatus || (exports.GeocodedWaypointStatus = {}));\nexports.AddressType = Object.assign({}, PlaceType1, PlaceType2);\nvar Maneuver;\n(function (Maneuver) {\n  Maneuver[\"turn_slight_left\"] = \"turn-slight-left\";\n  Maneuver[\"turn_sharp_left\"] = \"turn-sharp-left\";\n  Maneuver[\"uturn_left\"] = \"uturn-left\";\n  Maneuver[\"turn_left\"] = \"turn-left\";\n  Maneuver[\"turn_slight_right\"] = \"turn-slight-right\";\n  Maneuver[\"turn_sharp_right\"] = \"turn-sharp-right\";\n  Maneuver[\"uturn_right\"] = \"uturn-right\";\n  Maneuver[\"turn_right\"] = \"turn-right\";\n  Maneuver[\"straight\"] = \"straight\";\n  Maneuver[\"ramp_left\"] = \"ramp-left\";\n  Maneuver[\"ramp_right\"] = \"ramp-right\";\n  Maneuver[\"merge\"] = \"merge\";\n  Maneuver[\"fork_left\"] = \"fork-left\";\n  Maneuver[\"fork_right\"] = \"fork-right\";\n  Maneuver[\"ferry\"] = \"ferry\";\n  Maneuver[\"ferry_train\"] = \"ferry-train\";\n  Maneuver[\"roundabout_left\"] = \"roundabout-left\";\n  Maneuver[\"roundabout_right\"] = \"roundabout-right\";\n})(Maneuver = exports.Maneuver || (exports.Maneuver = {}));\n/** @see https://developers.google.com/maps/documentation/directions/intro#VehicleType. */\nvar VehicleType;\n(function (VehicleType) {\n  /** Rail. */\n  VehicleType[\"RAIL\"] = \"RAIL\";\n  /** Light rail transit. */\n  VehicleType[\"METRO_RAIL\"] = \"METRO_RAIL\";\n  /** Underground light rail. */\n  VehicleType[\"SUBWAY\"] = \"SUBWAY\";\n  /** Above ground light rail. */\n  VehicleType[\"TRAM\"] = \"TRAM\";\n  /** Monorail. */\n  VehicleType[\"MONORAIL\"] = \"MONORAIL\";\n  /** Heavy rail. */\n  VehicleType[\"HEAVY_RAIL\"] = \"HEAVY_RAIL\";\n  /** Commuter rail. */\n  VehicleType[\"COMMUTER_TRAIN\"] = \"COMMUTER_TRAIN\";\n  /** High speed train. */\n  VehicleType[\"HIGH_SPEED_TRAIN\"] = \"HIGH_SPEED_TRAIN\";\n  /** Bus. */\n  VehicleType[\"BUS\"] = \"BUS\";\n  /** Intercity bus. */\n  VehicleType[\"INTERCITY_BUS\"] = \"INTERCITY_BUS\";\n  /** Trolleybus. */\n  VehicleType[\"TROLLEYBUS\"] = \"TROLLEYBUS\";\n  /** Share taxi is a kind of bus with the ability to drop off and pick up passengers anywhere on its route. */\n  VehicleType[\"SHARE_TAXI\"] = \"SHARE_TAXI\";\n  /** Ferry. */\n  VehicleType[\"FERRY\"] = \"FERRY\";\n  /** A vehicle that operates on a cable, usually on the ground. Aerial cable cars may be of the type `GONDOLA_LIFT`. */\n  VehicleType[\"CABLE_CAR\"] = \"CABLE_CAR\";\n  /** An aerial cable car. */\n  VehicleType[\"GONDOLA_LIFT\"] = \"GONDOLA_LIFT\";\n  /**\n   * A vehicle that is pulled up a steep incline by a cable.\n   * A Funicular typically consists of two cars, with each car acting as a counterweight for the other.\n   */\n  VehicleType[\"FUNICULAR\"] = \"FUNICULAR\";\n  /** All other vehicles will return this type. */\n  VehicleType[\"OTHER\"] = \"OTHER\";\n})(VehicleType = exports.VehicleType || (exports.VehicleType = {}));\nvar GeocodingAddressComponentType;\n(function (GeocodingAddressComponentType) {\n  /** indicates the floor of a building address. */\n  GeocodingAddressComponentType[\"floor\"] = \"floor\";\n  /** typically indicates a place that has not yet been categorized. */\n  GeocodingAddressComponentType[\"establishment\"] = \"establishment\";\n  /** indicates a named point of interest. */\n  GeocodingAddressComponentType[\"point_of_interest\"] = \"point_of_interest\";\n  /** indicates a parking lot or parking structure. */\n  GeocodingAddressComponentType[\"parking\"] = \"parking\";\n  /** indicates a specific postal box. */\n  GeocodingAddressComponentType[\"post_box\"] = \"post_box\";\n  /** indicates a grouping of geographic areas, such as locality and sublocality, used for mailing addresses in some countries. */\n  GeocodingAddressComponentType[\"postal_town\"] = \"postal_town\";\n  /** indicates the room of a building address. */\n  GeocodingAddressComponentType[\"room\"] = \"room\";\n  /** indicates the precise street number. */\n  GeocodingAddressComponentType[\"street_number\"] = \"street_number\";\n  /**  indicate the location of a bus. */\n  GeocodingAddressComponentType[\"bus_station\"] = \"bus_station\";\n  /**  indicate the location of a train. */\n  GeocodingAddressComponentType[\"train_station\"] = \"train_station\";\n  /**  indicate the location of a public transit stop. */\n  GeocodingAddressComponentType[\"transit_station\"] = \"transit_station\";\n})(GeocodingAddressComponentType = exports.GeocodingAddressComponentType || (exports.GeocodingAddressComponentType = {}));\nvar LocationType;\n(function (LocationType) {\n  /**\n   * indicates that the returned result is a precise geocode for which we have location information\n   * accurate down to street address precision\n   */\n  LocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n  /**\n   * indicates that the returned result reflects an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n   */\n  LocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n  /**\n   * indicates that the returned result is the geometric center of a result such as a polyline\n   * (for example, a street) or polygon (region).\n   */\n  LocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n  /** indicates that the returned result is approximate. */\n  LocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n})(LocationType = exports.LocationType || (exports.LocationType = {}));\nvar RadioType;\n(function (RadioType) {\n  RadioType[\"lte\"] = \"lte\";\n  RadioType[\"gsm\"] = \"gsm\";\n  RadioType[\"cdma\"] = \"cdma\";\n  RadioType[\"wcdma\"] = \"wcdma\";\n})(RadioType = exports.RadioType || (exports.RadioType = {}));","map":{"version":3,"names":["Status","exports","PlaceIdScope","PlaceInputType","PlaceType1","PlaceType2","AspectRatingType","Language","TravelMode","TravelRestriction","UnitSystem","TrafficModel","TransitMode","TransitRoutingPreference","DirectionsResponseStatus","DirectionsReponseStatus","GeocodedWaypointStatus","AddressType","Object","assign","Maneuver","VehicleType","GeocodingAddressComponentType","LocationType","RadioType"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/common.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type RequestParams = ApiKeyParams | PremiumPlanParams;\n\nexport interface ApiKeyParams {\n/**\n   * You must include an API key with every API request. We strongly recommend that you restrict your API key.\n   * Restrictions provide added security and help ensure only authorized requests are made with your API key.\n   *\n   * There are two restrictions. You should set both:\n   *\n   * Application restriction:  Limits usage of the API key to either websites (HTTP referrers),\n   * web servers (IP addresses), or mobile apps (Android apps or iOS apps). You can select only one\n   * restriction from this category, based on the platform of the API or SDK (see GMP APIs by Platform).\n   *\n   * API restriction: Limits usage of the API key to one or more APIs or SDKs. Requests to an API or SDK\n   * associated with the API key will be processed. Requests to an API or SDK not associated with the API\n   * key will fail.\n   */\n  key: string;\n}\n\n/**\n * The Google Maps Platform Premium Plan is no longer available for sign up or new customers. This option is\n * only provided for maintaining existing legacy applications that use client IDs. For new applications,\n * please use API keys.\n * @deprecated\n */\nexport interface PremiumPlanParams {\n  /** project client ID */\n  client_id: string;\n  /** project URL signing secret. Used to create the request signature */\n  client_secret: string;\n}\n\nexport interface ResponseData {\n  /** contains metadata on the request. See Status Codes below. */\n  status: Status;\n  /**\n   * When the top-level status code is other than `OK`, this field contains more detailed information\n   * about the reasons behind the given status code.\n   */\n  error_message: string;\n  /** may contain a set of attributions about this listing which must be displayed to the user (some listings may not have attribution). */\n  html_attributions?: string[];\n  /**\n   * contains a token that can be used to return up to 20 additional results.\n   * A `next_page_token` will not be returned if there are no additional results to display.\n   * The maximum number of results that can be returned is 60.\n   * There is a short delay between when a `next_page_token` is issued, and when it will become valid.\n   */\n  next_page_token?: string;\n}\n\nexport enum Status {\n  /** indicates the response contains a valid result. */\n  OK = \"OK\",\n  /** indicates that the provided request was invalid. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the Distance Matrix service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a Distance Matrix request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n  /** indicates that the request was successful but returned no results. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /** indicates that the referenced location (place_id) was not found in the Places database. */\n  NOT_FOUND = \"NOT_FOUND\",\n}\n\nexport interface PlacePhoto {\n  /** a string used to identify the photo when you perform a Photo request. */\n  photo_reference: string;\n  /** the maximum height of the image. */\n  height: number;\n  /** the maximum width of the image. */\n  width: number;\n  /** contains any required attributions. This field will always be present, but may be empty. */\n  html_attributions: string[];\n}\n\nexport enum PlaceIdScope {\n  /**\n   * The place ID is recognised by your application only.\n   * This is because your application added the place, and the place has not yet passed the moderation process.\n   */\n  APP = \"APP\",\n  /** The place ID is available to other applications and on Google Maps. */\n  GOOGLE = \"GOOGLE\",\n}\n\nexport interface AlternativePlaceId {\n  /**\n   * The most likely reason for a place to have an alternative place ID is if your application adds a place and receives\n   * an application-scoped place ID, then later receives a Google-scoped place ID after passing the moderation process.\n   */\n  place_id: string;\n  /**\n   * The scope of an alternative place ID will always be `APP`,\n   * indicating that the alternative place ID is recognised by your application only.\n   */\n  scope: \"APP\";\n}\n\nexport enum PlaceInputType {\n  textQuery = \"textquery\",\n  phoneNumber = \"phonenumber\",\n}\n\n/**\n * Table 1: Types supported in place search and addition\n *\n * You can use the following values in the types filter for place searches and when adding a place.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table1\n */\nexport enum PlaceType1 {\n  accounting = \"accounting\",\n  /** indicates an airport. */\n  airport = \"airport\",\n  amusement_park = \"amusement_park\",\n  aquarium = \"aquarium\",\n  art_gallery = \"art_gallery\",\n  atm = \"atm\",\n  bakery = \"bakery\",\n  bank = \"bank\",\n  bar = \"bar\",\n  beauty_salon = \"beauty_salon\",\n  bicycle_store = \"bicycle_store\",\n  book_store = \"book_store\",\n  bowling_alley = \"bowling_alley\",\n  bus_station = \"bus_station\",\n  cafe = \"cafe\",\n  campground = \"campground\",\n  car_dealer = \"car_dealer\",\n  car_rental = \"car_rental\",\n  car_repair = \"car_repair\",\n  car_wash = \"car_wash\",\n  casino = \"casino\",\n  cemetery = \"cemetery\",\n  church = \"church\",\n  city_hall = \"city_hall\",\n  clothing_store = \"clothing_store\",\n  convenience_store = \"convenience_store\",\n  courthouse = \"courthouse\",\n  dentist = \"dentist\",\n  department_store = \"department_store\",\n  doctor = \"doctor\",\n  drugstore = \"drugstore\",\n  electrician = \"electrician\",\n  electronics_store = \"electronics_store\",\n  embassy = \"embassy\",\n  fire_station = \"fire_station\",\n  florist = \"florist\",\n  funeral_home = \"funeral_home\",\n  furniture_store = \"furniture_store\",\n  gas_station = \"gas_station\",\n  gym = \"gym\",\n  hair_care = \"hair_care\",\n  hardware_store = \"hardware_store\",\n  hindu_temple = \"hindu_temple\",\n  home_goods_store = \"home_goods_store\",\n  hospital = \"hospital\",\n  insurance_agency = \"insurance_agency\",\n  jewelry_store = \"jewelry_store\",\n  laundry = \"laundry\",\n  lawyer = \"lawyer\",\n  library = \"library\",\n  light_rail_station = \"light_rail_station\",\n  liquor_store = \"liquor_store\",\n  local_government_office = \"local_government_office\",\n  locksmith = \"locksmith\",\n  lodging = \"lodging\",\n  meal_delivery = \"meal_delivery\",\n  meal_takeaway = \"meal_takeaway\",\n  mosque = \"mosque\",\n  movie_rental = \"movie_rental\",\n  movie_theater = \"movie_theater\",\n  moving_company = \"moving_company\",\n  museum = \"museum\",\n  night_club = \"night_club\",\n  painter = \"painter\",\n  /** indicates a named park. */\n  park = \"park\",\n  parking = \"parking\",\n  pet_store = \"pet_store\",\n  pharmacy = \"pharmacy\",\n  physiotherapist = \"physiotherapist\",\n  plumber = \"plumber\",\n  police = \"police\",\n  post_office = \"post_office\",\n  real_estate_agency = \"real_estate_agency\",\n  restaurant = \"restaurant\",\n  roofing_contractor = \"roofing_contractor\",\n  rv_park = \"rv_park\",\n  school = \"school\",\n  secondary_school = \"secondary_school\",\n  shoe_store = \"shoe_store\",\n  shopping_mall = \"shopping_mall\",\n  spa = \"spa\",\n  stadium = \"stadium\",\n  storage = \"storage\",\n  store = \"store\",\n  subway_station = \"subway_station\",\n  supermarket = \"supermarket\",\n  synagogue = \"synagogue\",\n  taxi_stand = \"taxi_stand\",\n  tourist_attraction = \"tourist_attraction\",\n  train_station = \"train_station\",\n  transit_station = \"transit_station\",\n  travel_agency = \"travel_agency\",\n  university = \"university\",\n  veterinary_care = \"veterinary_care\",\n  zoo = \"zoo\",\n}\n\n/**\n * Table 2: Additional types returned by the Places service\n *\n * The following types may be returned in the results of a place search, in addition to the types in table 1 above.\n * For more details on these types, refer to [Address Types](https://developers.google.com/maps/documentation/geocoding/intro#Types)\n * in Geocoding Responses.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table2\n */\nexport enum PlaceType2 {\n  /**\n   * indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states.\n   * Not all nations exhibit these administrative levels. In most cases, `administrative_area_level_1` short names will closely match\n   * ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based\n   * on a variety of signals and location data.\n   */\n  administrative_area_level_1 = \"administrative_area_level_1\",\n  /**\n   * indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_2 = \"administrative_area_level_2\",\n  /**\n   * indicates a third-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_3 = \"administrative_area_level_3\",\n  /**\n   * indicates a fourth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_4 = \"administrative_area_level_4\",\n  /**\n   * indicates a fifth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_5 = \"administrative_area_level_5\",\n  archipelago = \"archipelago\",\n  /** indicates a commonly-used alternative name for the entity. */\n  colloquial_area = \"colloquial_area\",\n  continent = \"continent\",\n  /** indicates the national political entity, and is typically the highest order type returned by the Geocoder. */\n  country = \"country\",\n  establishment = \"establishment\",\n  finance = \"finance\",\n  floor = \"floor\",\n  food = \"food\",\n  general_contractor = \"general_contractor\",\n  geocode = \"geocode\",\n  health = \"health\",\n  /** indicates a major intersection, usually of two major roads. */\n  intersection = \"intersection\",\n  landmark = \"landmark\",\n  /** indicates an incorporated city or town political entity. */\n  locality = \"locality\",\n  /** indicates a prominent natural feature. */\n  natural_feature = \"natural_feature\",\n  /** indicates a named neighborhood */\n  neighborhood = \"neighborhood\",\n  place_of_worship = \"place_of_worship\",\n  plus_code = \"plus_code\",\n  point_of_interest = \"point_of_interest\",\n  /** indicates a political entity. Usually, this type indicates a polygon of some civil administration. */\n  political = \"political\",\n  post_box = \"post_box\",\n  /** indicates a postal code as used to address postal mail within the country. */\n  postal_code = \"postal_code\",\n  postal_code_prefix = \"postal_code_prefix\",\n  postal_code_suffix = \"postal_code_suffix\",\n  postal_town = \"postal_town\",\n  /** indicates a named location, usually a building or collection of buildings with a common name */\n  premise = \"premise\",\n  room = \"room\",\n  /** indicates a named route (such as \"US 101\"). */\n  route = \"route\",\n  street_address = \"street_address\",\n  street_number = \"street_number\",\n  /**\n   * indicates a first-order civil entity below a locality. For some locations may receive one of the additional types:\n   * `sublocality_level_1` to `sublocality_level_5`. Each sublocality level is a civil entity. Larger numbers indicate a smaller\n   * geographic area.\n   */\n  sublocality = \"sublocality\",\n  sublocality_level_1 = \"sublocality_level_1\",\n  sublocality_level_2 = \"sublocality_level_2\",\n  sublocality_level_3 = \"sublocality_level_3\",\n  sublocality_level_4 = \"sublocality_level_4\",\n  sublocality_level_5 = \"sublocality_level_5\",\n  /**\n   * indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a\n   * common name.\n   */\n  subpremise = \"subpremise\",\n  town_square = \"town_square\",\n}\n\nexport interface PlaceReview {\n  /**\n   * contains a collection of `AspectRating` objects, each of which provides a rating of a single attribute of the establishment.\n   * The first object in the collection is considered the primary aspect.\n   */\n  aspects: AspectRating[];\n  /** the name of the user who submitted the review. Anonymous reviews are attributed to \"A Google user\". */\n  author_name: string;\n  /** the URL to the user's Google Maps Local Guides profile, if available. */\n  author_url?: string;\n  /**\n   * an IETF language code indicating the language used in the user's review.\n   * This field contains the main language tag only, and not the secondary tag indicating country or region.\n   * For example, all the English reviews are tagged as 'en', and not 'en-AU' or 'en-UK' and so on.\n   */\n  language: string;\n  /** the URL to the user's profile photo, if available. */\n  profile_photo_url: string;\n  /** the user's overall rating for this place. This is a whole number, ranging from 1 to 5. */\n  rating: number;\n  /* The time since review in relative terms, for example '7 months ago' */\n  relative_time_description: string;\n  /**\n   * the user's review. When reviewing a location with Google Places, text reviews are considered optional.\n   * Therefore, this field may by empty. Note that this field may include simple HTML markup.\n   * For example, the entity reference `&amp;` may represent an ampersand character.\n   */\n  text: string;\n  /** the time that the review was submitted, measured in the number of seconds since since midnight, January 1, 1970 UTC. */\n  time: string;\n}\n\nexport interface AspectRating {\n  /** the name of the aspect that is being rated. */\n  type: AspectRatingType;\n  /** the user's rating for this particular aspect, from 0 to 3. */\n  rating: number;\n}\n\nexport enum AspectRatingType {\n  appeal = \"appeal\",\n  atmosphere = \"atmosphere\",\n  decor = \"decor\",\n  facilities = \"facilities\",\n  food = \"food\",\n  overall = \"overall\",\n  quality = \"quality\",\n  service = \"service\",\n}\n\nexport type Place = Partial<PlaceData>;\n\nexport interface PlaceData {\n  /**\n   * is an array containing the separate components applicable to this address.\n   *\n   * Note the following facts about the `address_components[]` array:\n   *  - The array of address components may contain more components than the `formatted_address`.\n   *  - The array does not necessarily include all the political entities that contain an address,\n   *    apart from those included in the `formatted_address`. To retrieve all the political entities\n   *    that contain a specific address, you should use reverse geocoding, passing the latitude/longitude\n   *    of the address as a parameter to the request.\n   *  - The format of the response is not guaranteed to remain the same between requests.\n   *    In particular, the number of `address_components` varies based on the address requested\n   *    and can change over time for the same address. A component can change position in the array.\n   *    The type of the component can change. A particular component may be missing in a later response.\n   */\n  address_components: AddressComponent[];\n  /**\n   * is a string containing the human-readable address of this place.\n   *\n   * Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom,\n   * do not allow distribution of true postal addresses due to licensing restrictions.\n   *\n   * The formatted address is logically composed of one or more address components.\n   * For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\"\n   * (the street number), \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).\n   *\n   * Do not parse the formatted address programmatically. Instead you should use the individual address components,\n   * which the API response includes in addition to the formatted address field.\n   */\n  formatted_address: string;\n  /**\n   * contains the place's phone number in its local format.\n   * For example, the `formatted_phone_number` for Google's Sydney, Australia office is `(02) 9374 4000`.\n   */\n  formatted_phone_number: string;\n  /** is a representation of the place's address in the [adr microformat](http://microformats.org/wiki/adr). */\n  adr_address: string;\n  /**\n   * contains the following information:\n   *  - `location`: contains the geocoded latitude,longitude value for this place.\n   *  - `viewport`: contains the preferred viewport when displaying this place on a map as a `LatLngBounds` if it is known.\n   */\n  geometry: AddressGeometry;\n  /**\n   * is an encoded location reference, derived from latitude and longitude coordinates, that represents an area:\n   * 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller.\n   * Plus codes can be used as a replacement for street addresses in places where they do not exist\n   * (where buildings are not numbered or streets are not named).\n   *\n   * The plus code is formatted as a global code and a compound code:\n   *  - `global_code` is a 4 character area code and 6 character or longer local code (849VCWC8+R9).\n   *  - `compound_code` is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA).\n   *\n   * Typically, both the global code and compound code are returned.\n   * However, if the result is in a remote location (for example, an ocean or desert) only the global code may be returned.\n   *\n   * @see [Open Location Code](https://en.wikipedia.org/wiki/Open_Location_Code)\n   * @see [plus codes](https://plus.codes/)\n   */\n  plus_code: PlusCode;\n  /** contains the URL of a suggested icon which may be displayed to the user when indicating this result on a map. */\n  icon: string;\n  /** \n   * The default HEX color code for the place's category. \n   * @see https://developers.google.com/maps/documentation/places/web-service/icons\n   */\n  icon_background_color: string;\n  /** \n   * The base URL for a non-colored icon, minus the file type extension (append `.svg` or `.png`).\n   * @see https://developers.google.com/maps/documentation/places/web-service/icons\n   */\n  icon_mask_base_uri: string;\n  /**\n   * contains the place's phone number in international format.\n   * International format includes the country code, and is prefixed with the plus (+) sign.\n   * For example, the `international_phone_number` for Google's Sydney, Australia office is `+61 2 9374 4000`.\n   */\n  \n  international_phone_number: string;\n  /**\n   * contains the human-readable name for the returned result.\n   * For establishment results, this is usually the canonicalized business name.\n   */\n  name: string;\n  /** place opening hours. */\n  opening_hours: OpeningHours;\n  /**\n   * is a boolean flag indicating whether the place has permanently shut down (value `true`).\n   * If the place is not permanently closed, the flag is absent from the response. This field is deprecated in favor of `business_status`.\n   */\n  permanently_closed: boolean;\n  /**\n   * is a string indicating the operational status of the place, if it is a business.\n   */\n  business_status: string;\n  /**\n   * an array of photo objects, each containing a reference to an image.\n   * A Place Details request may return up to ten photos.\n   * More information about place photos and how you can use the images in your application can be found in the Place Photos documentation.\n   */\n  photos: PlacePhoto[];\n  /**\n   * A textual identifier that uniquely identifies a place.\n   * To retrieve information about the place, pass this identifier in the `placeId` field of a Places API request.\n   */\n  place_id: string;\n  /**\n   * The price level of the place, on a scale of 0 to 4.\n   * The exact amount indicated by a specific value will vary from region to region.\n   *\n   * Price levels are interpreted as follows:\n   *  - `0`: Free\n   *  - `1`: Inexpensive\n   *  - `2`: Moderate\n   *  - `3`: Expensive\n   *  - `4`: Very Expensive\n   */\n  price_level: number;\n  /** contains the place's rating, from 1.0 to 5.0, based on aggregated user reviews. */\n  rating: number;\n  /** The total number of ratings from users */\n  user_ratings_total: number;\n  /**\n   * a JSON array of up to five reviews. If a `language` parameter was specified in the Place Details request,\n   * the Places Service will bias the results to prefer reviews written in that language.\n   */\n  reviews: PlaceReview[];\n  /**\n   * contains an array of feature types describing the given result.\n   * XML responses include multiple `<type>` elements if more than one type is assigned to the result.\n   */\n  types: AddressType[];\n  /**\n   * contains the URL of the official Google page for this place.\n   * This will be the Google-owned page that contains the best available information about the place.\n   * Applications must link to or embed this page on any screen that shows detailed results about the place to the user.\n   */\n  url: string;\n  /**\n   * contains the number of minutes this place’s current timezone is offset from UTC.\n   * For example, for places in Sydney, Australia during daylight saving time this would be 660 (+11 hours from UTC),\n   * and for places in California outside of daylight saving time this would be -480 (-8 hours from UTC).\n   */\n  utc_offset: number;\n  /**\n   * lists a simplified address for the place, including the street name, street number, and locality,\n   * but not the province/state, postal code, or country. For example, Google's Sydney, Australia office\n   * has a `vicinity` value of `48 Pirrama Road, Pyrmont`.\n   */\n  vicinity: string;\n  /** lists the authoritative website for this place, such as a business' homepage. */\n  website: string;\n}\n\nexport type LatLngArray = [number, number];\n\nexport type LatLngString = string;\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface LatLngLiteralVerbose {\n  latitude: number;\n  longitude: number;\n}\n\n/**\n * A latitude, longitude pair. The API methods accept either:\n *  - a two-item array of [latitude, longitude];\n *  - a comma-separated string;\n *  - an object with 'lat', 'lng' properties; or\n *  - an object with 'latitude', 'longitude' properties.\n */\nexport type LatLng =\n  | LatLngArray\n  | LatLngString\n  | LatLngLiteral\n  | LatLngLiteralVerbose;\n\n/** The bounds parameter defines the latitude/longitude coordinates of the southwest and northeast corners of this bounding box. */\nexport interface LatLngBounds {\n  northeast: LatLngLiteral;\n  southwest: LatLngLiteral;\n}\n\n/**\n * By default the API will attempt to load the most appropriate language based on the users location or browser settings.\n * Some APIs allow you to explicitly set a language when you make a request\n *\n * @see https://developers.google.com/maps/faq#languagesupport\n */\nexport enum Language {\n  /** Arabic */\n  ar = \"ar\",\n  /** Belarusian */\n  be = \"be\",\n  /** Bulgarian */\n  bg = \"bg\",\n  /** Bengali */\n  bn = \"bn\",\n  /** Catalan */\n  ca = \"ca\",\n  /** Czech */\n  cs = \"cs\",\n  /** Danish */\n  da = \"da\",\n  /** German */\n  de = \"de\",\n  /** Greek */\n  el = \"el\",\n  /** English */\n  en = \"en\",\n  /** English (Australian) */\n  en_Au = \"en-Au\",\n  /** English (Great Britain) */\n  en_GB = \"en-GB\",\n  /** Spanish */\n  es = \"es\",\n  /** Basque */\n  eu = \"eu\",\n  /** Farsi */\n  fa = \"fa\",\n  /** Finnish */\n  fi = \"fi\",\n  /** Filipino */\n  fil = \"fil\",\n  /** French */\n  fr = \"fr\",\n  /** Galician */\n  gl = \"gl\",\n  /** Gujarati */\n  gu = \"gu\",\n  /** Hindi */\n  hi = \"hi\",\n  /** Croatian */\n  hr = \"hr\",\n  /** Hungarian */\n  hu = \"hu\",\n  /** Indonesian */\n  id = \"id\",\n  /** Italian */\n  it = \"it\",\n  /** Hebrew */\n  iw = \"iw\",\n  /** Japanese */\n  ja = \"ja\",\n  /** Kazakh */\n  kk = \"kk\",\n  /** Kannada */\n  kn = \"kn\",\n  /** Korean */\n  ko = \"ko\",\n  /** Kyrgyz */\n  ky = \"ky\",\n  /** Lithuanian */\n  lt = \"lt\",\n  /** Latvian */\n  lv = \"lv\",\n  /** Macedonian */\n  mk = \"mk\",\n  /** Malayalam */\n  ml = \"ml\",\n  /** Marathi */\n  mr = \"mr\",\n  /** Burmese */\n  my = \"my\",\n  /** Dutch */\n  nl = \"nl\",\n  /** Norwegian */\n  no = \"no\",\n  /** Punjabi */\n  pa = \"pa\",\n  /** Polish */\n  pl = \"pl\",\n  /** Portuguese */\n  pt = \"pt\",\n  /** Portuguese (Brazil) */\n  pt_BR = \"pt-BR\",\n  /** Portuguese (Portugal) */\n  pt_PT = \"pt-PT\",\n  /** Romanian */\n  ro = \"ro\",\n  /** Russian */\n  ru = \"ru\",\n  /** Slovak */\n  sk = \"sk\",\n  /** Slovenian */\n  sl = \"sl\",\n  /** Albanian */\n  sq = \"sq\",\n  /** Serbian */\n  sr = \"sr\",\n  /** Swedish */\n  sv = \"sv\",\n  /** Tamil */\n  ta = \"ta\",\n  /** Telugu */\n  te = \"te\",\n  /** Thai */\n  th = \"th\",\n  /** Tagalog */\n  tl = \"tl\",\n  /** Turkish */\n  tr = \"tr\",\n  /** Ukrainian */\n  uk = \"uk\",\n  /** Uzbek */\n  uz = \"uz\",\n  /** Vietnamese */\n  vi = \"vi\",\n  /** Chinese (Simlified) */\n  zh_CN = \"zh-CN\",\n  /** Chinese (Traditional) */\n  zh_TW = \"zh-TW\",\n}\n\n/**\n * When you calculate directions, you may specify the transportation mode to use.\n * By default, directions are calculated as `driving` directions.\n *\n * **Note:** Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths,\n * so these directions will return warnings in the returned result which you must display to the user.\n */\nexport enum TravelMode {\n  /** (default) indicates standard driving directions using the road network. */\n  driving = \"driving\",\n  /** requests walking directions via pedestrian paths & sidewalks (where available). */\n  walking = \"walking\",\n  /** requests bicycling directions via bicycle paths & preferred streets (where available). */\n  bicycling = \"bicycling\",\n  /**\n   * requests directions via public transit routes (where available).\n   * If you set the mode to transit, you can optionally specify either a departure_time or an arrival_time.\n   * If neither time is specified, the departure_time defaults to now (that is, the departure time defaults to the current time).\n   * You can also optionally include a transit_mode and/or a transit_routing_preference.\n   */\n  transit = \"transit\",\n}\n\nexport enum TravelRestriction {\n  /** indicates that the calculated route should avoid toll roads/bridges. */\n  tolls = \"tolls\",\n  /** indicates that the calculated route should avoid highways. */\n  highways = \"highways\",\n  /** indicates that the calculated route should avoid ferries. */\n  ferries = \"ferries\",\n  /**\n   * indicates that the calculated route should avoid indoor steps for walking and transit directions.\n   * Only requests that include an API key or a Google Maps APIs Premium Plan client ID will receive indoor steps by default.\n   */\n  indoor = \"indoor\",\n}\n\n/**\n * Directions results contain text within distance fields that may be displayed to the user to indicate the distance of\n * a particular \"step\" of the route. By default, this text uses the unit system of the origin's country or region.\n */\nexport enum UnitSystem {\n  /** specifies usage of the metric system. Textual distances are returned using kilometers and meters. */\n  metric = \"metric\",\n  /** specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet. */\n  imperial = \"imperial\",\n}\n\nexport enum TrafficModel {\n  /**\n   * indicates that the returned `duration_in_traffic` should be the best estimate of travel time given what is known about\n   * both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n   */\n  best_guess = \"best_guess\",\n  /**\n   * indicates that the returned `duration_in_traffic` should be longer than the actual travel time on most days,\n   * though occasional days with particularly bad traffic conditions may exceed this value.\n   */\n  pessimistic = \"pessimistic\",\n  /**\n   * indicates that the returned `duration_in_traffic` should be shorter than the actual travel time on most days,\n   * though occasional days with particularly good traffic conditions may be faster than this value.\n   */\n  optimistic = \"optimistic\",\n}\nexport enum TransitMode {\n  /** indicates that the calculated route should prefer travel by bus. */\n  bus = \"bus\",\n  /** indicates that the calculated route should prefer travel by subway. */\n  subway = \"subway\",\n  /** indicates that the calculated route should prefer travel by train. */\n  train = \"train\",\n  /** indicates that the calculated route should prefer travel by tram and light rail. */\n  tram = \"tram\",\n  /**\n   * indicates that the calculated route should prefer travel by train, tram, light rail, and subway.\n   * This is equivalent to `transit_mode=train|tram|subway`\n   */\n  rail = \"rail\",\n}\n\nexport enum TransitRoutingPreference {\n  /** indicates that the calculated route should prefer limited amounts of walking. */\n  less_walking = \"less_walking\",\n  /** indicates that the calculated route should prefer a limited number of transfers. */\n  fewer_transfers = \"fewer_transfers\",\n}\n\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n */\nexport enum DirectionsResponseStatus {\n  /** indicates the response contains a valid `result`. */\n  OK = \"OK\",\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  NOT_FOUND = \"NOT_FOUND\",\n  /** indicates no route could be found between the origin and destination. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the directions service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n}\n\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n * @deprecated\n */\nexport enum DirectionsReponseStatus {\n  /** indicates the response contains a valid `result`. */\n  OK = \"OK\",\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  NOT_FOUND = \"NOT_FOUND\",\n  /** indicates no route could be found between the origin and destination. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the directions service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n}\n\n/**\n * Elements in the `geocoded_waypoints` array correspond, by their zero-based position, to the origin,\n * the waypoints in the order they are specified, and the destination.\n */\nexport interface GeocodedWaypoint {\n  /** indicates the status code resulting from the geocoding operation. */\n  geocoder_status: GeocodedWaypointStatus;\n  /**\n   * indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the\n   * requested address. You may wish to examine the original request for misspellings and/or an incomplete address.\n   *\n   * Partial matches most often occur for street addresses that do not exist within the locality you pass in the request.\n   * Partial matches may also be returned when a request matches two or more locations in the same locality.\n   * For example, \"21 Henr St, Bristol, UK\" will return a partial match for both Henry Street and Henrietta Street.\n   * Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address.\n   * Suggestions triggered in this way will also be marked as a partial match.\n   */\n  partial_match: boolean;\n  /** unique identifier that can be used with other Google APIs. */\n  place_id: string;\n  /**\n   * indicates the *address type* of the geocoding result used for calculating directions.\n   *\n   * An empty list of types indicates there are no known types for the particular address component, for example, Lieu-dit in France.\n   */\n  types: AddressType[];\n}\n\nexport enum GeocodedWaypointStatus {\n  /** indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned. */\n  OK = \"OK\",\n  /**\n   * indicates that the geocode was successful but returned no results.\n   * This may occur if the geocoder was passed a non-existent `address`.\n   */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n}\n\nexport const AddressType = Object.assign({}, PlaceType1, PlaceType2);\nexport type AddressType = PlaceType1 | PlaceType2;\n\n/**\n * This route may consist of one or more `legs` depending on whether any waypoints were specified. As well, the route also contains\n * copyright and warning information which must be displayed to the user in addition to the routing information.\n */\nexport interface DirectionsRoute {\n  /** contains a short textual description for the route, suitable for naming and disambiguating the route from alternatives. */\n  summary: string;\n  /**\n   * contains an array which contains information about a leg of the route, between two locations within the given route.\n   * A separate leg will be present for each waypoint or destination specified.\n   * (A route with no waypoints will contain exactly one leg within the `legs` array.)\n   * Each leg consists of a series of `steps`.\n   */\n  legs: RouteLeg[];\n  /**\n   * contains an array indicating the order of any waypoints in the calculated route.\n   * This waypoints may be reordered if the request was passed `optimize:true` within its `waypoints` parameter.\n   */\n  waypoint_order: number[];\n  /**\n   * contains a single `points` object that holds an encoded polyline representation of the route.\n   * This polyline is an approximate (smoothed) path of the resulting directions.\n   */\n  overview_polyline: {\n    points: string;\n  };\n  /** contains the viewport bounding box of the `overview_polyline`. */\n  bounds: LatLngBounds;\n  /** contains the copyrights text to be displayed for this route. You must handle and display this information yourself. */\n  copyrights: string;\n  /** contains an array of warnings to be displayed when showing these directions. You must handle and display these warnings yourself. */\n  warnings: string[];\n  /**\n   * If present, contains the total fare (that is, the total ticket costs) on this route.\n   * This property is only returned for transit requests and only for routes where fare information is available for all transit legs.\n   *\n   * **Note:** The Directions API only returns fare information for requests that contain either an API key or a client ID\n   * and digital signature.\n   */\n  fare: TransitFare;\n  /**\n   * An array of LatLngs representing the entire course of this route. The path is simplified in order to make\n   * it suitable in contexts where a small number of vertices is required (such as Static Maps API URLs).\n   */\n  overview_path: LatLngLiteral[];\n}\n\nexport interface TransitFare {\n  /** An [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) indicating the currency that the amount is expressed in. */\n  currency: string;\n  /** The total fare amount, in the currency specified above. */\n  value: number;\n  /** The total fare amount, formatted in the requested language. */\n  text: string;\n}\n\n/**\n * A single leg of the journey from the origin to the destination in the calculated route.\n * For routes that contain no waypoints, the route will consist of a single \"leg,\" but for routes that define one or more waypoints,\n * the route will consist of one or more legs, corresponding to the specific legs of the journey.\n */\nexport interface RouteLeg {\n  /** contains an array of steps denoting information about each separate step of the leg of the journey. */\n  steps: DirectionsStep[];\n  /**\n   * indicates the total distance covered by this leg, as a field with the following elements.\n   *\n   * This field may be absent if the distance is unknown.\n   */\n  distance: Distance;\n  /**\n   * indicates the total duration of this leg.\n   *\n   * This field may be absent if the duration is unknown.\n   */\n  duration: Duration;\n  /**\n   * indicates the total duration of this leg.\n   * This value is an estimate of the time in traffic based on current and historical traffic conditions.\n   * See the `traffic_model` request parameter for the options you can use to request that the returned value is optimistic, pessimistic,\n   * or a best-guess estimate. The duration in traffic is returned only if all of the following are true:\n   *\n   *  - The request includes a valid API key, or a valid Google Maps APIs Premium Plan client ID and signature.\n   *  - The request does not include stopover waypoints. If the request includes waypoints, they must be prefixed with `via:`\n   *    to avoid stopovers.\n   *  - The request is specifically for driving directions—the `mode` parameter is set to `driving`.\n   *  - The request includes a `departure_time` parameter.\n   *  - Traffic conditions are available for the requested route.\n   */\n  duration_in_traffic?: Duration;\n  /** contains the estimated time of arrival for this leg. This property is only returned for transit directions. */\n  arrival_time: Time;\n  /**\n   * contains the estimated time of departure for this leg, specified as a `Time` object.\n   * The `departure_time` is only available for transit directions.\n   */\n  departure_time: Time;\n  /**\n   * contains the latitude/longitude coordinates of the origin of this leg.\n   * Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road)\n   * at the start and end points, `start_location` may be different than the provided origin of this leg if, for example,\n   * a road is not near the origin.\n   */\n  start_location: LatLngLiteral;\n  /**\n   * contains the latitude/longitude coordinates of the given destination of this leg.\n   * Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road)\n   * at the start and end points, `end_location` may be different than the provided destination of this leg if, for example,\n   * a road is not near the destination.\n   */\n  end_location: LatLngLiteral;\n  /** contains the human-readable address (typically a street address) resulting from reverse geocoding the `start_location` of this leg. */\n  start_address: string;\n  /** contains the human-readable address (typically a street address) from reverse geocoding the `end_location` of this leg. */\n  end_address: string;\n}\n\n/**\n * A step is the most atomic unit of a direction's route, containing a single step describing a specific, single instruction on the journey.\n * E.g. \"Turn left at W. 4th St.\" The step not only describes the instruction but also contains distance and duration information relating to\n * how this step relates to the following step. For example, a step denoted as \"Merge onto I-80 West\" may contain a duration of\n * \"37 miles\" and \"40 minutes,\" indicating that the next step is 37 miles/40 minutes from this step.\n *\n * When using the Directions API to search for transit directions, the steps array will include additional transit details in the form of\n * a `transit_details` array. If the directions include multiple modes of transportation, detailed directions will be provided for walking or\n * driving steps in an inner `steps` array. For example, a walking step will include directions from the start and end locations:\n * \"Walk to Innes Ave & Fitch St\". That step will include detailed walking directions for that route in the inner `steps` array, such as:\n * \"Head north-west\", \"Turn left onto Arelious Walker\", and \"Turn left onto Innes Ave\".\n */\nexport interface DirectionsStep {\n  /** contains formatted instructions for this step, presented as an HTML text string. */\n  html_instructions: string;\n  /**\n   * contains the distance covered by this step until the next step. (See the discussion of this field in Directions Legs)\n   *\n   * This field may be undefined if the distance is unknown.\n   */\n  distance: Distance;\n  /**\n   * contains the typical time required to perform the step, until the next step. (See the description in Directions Legs)\n   *\n   * This field may be undefined if the duration is unknown\n   */\n  duration: Duration;\n  /** contains the location of the starting point of this step, as a single set of `lat` and `lng` fields. */\n  start_location: LatLngLiteral;\n  /** contains the location of the last point of this step, as a single set of `lat` and `lng` fields. */\n  end_location: LatLngLiteral;\n  /**\n   * contains the action to take for the current step (turn left, merge, straight, etc.).\n   * This field is used to determine which icon to display.\n   */\n  maneuver: Maneuver;\n  /**\n   * contains a single points object that holds an encoded polyline representation of the step.\n   * This polyline is an approximate (smoothed) path of the step.\n   */\n  polyline: {\n    points: string;\n  };\n  /**\n   * contains detailed directions for walking or driving steps in transit directions.\n   * Substeps are only available when `travel_mode` is set to \"transit\".\n   * The inner `steps` array is of the same type as `steps`.\n   */\n  steps: DirectionsStep;\n  /** contains transit specific information. This field is only returned with travel_mode is set to \"transit\". */\n  transit_details: TransitDetails;\n  /** contains the type of travel mode used. */\n  travel_mode: TravelMode;\n}\n\nexport interface Distance {\n  /** indicates the distance in meters. */\n  value: number;\n  /**\n   * contains a human-readable representation of the distance, displayed in units as used at the origin\n   * (or as overridden within the `units` parameter in the request).\n   * (For example, miles and feet will be used for any origin within the United States.)\n   */\n  text: string;\n}\n\nexport interface Duration {\n  /** indicates the duration in seconds. */\n  value: number;\n  /** contains a human-readable representation of the duration. */\n  text: string;\n}\n\nexport interface Time {\n  /** the time specified as a JavaScript `Date` object. */\n  value: Date;\n  /** the time specified as a string. The time is displayed in the time zone of the transit stop. */\n  text: string;\n  /**\n   * contains the time zone of this station. The value is the name of the time zone as defined in the\n   * [IANA Time Zone Database](http://www.iana.org/time-zones), e.g. \"America/New_York\".\n   */\n  time_zone: string;\n}\n\nexport enum Maneuver {\n  turn_slight_left = \"turn-slight-left\",\n  turn_sharp_left = \"turn-sharp-left\",\n  uturn_left = \"uturn-left\",\n  turn_left = \"turn-left\",\n  turn_slight_right = \"turn-slight-right\",\n  turn_sharp_right = \"turn-sharp-right\",\n  uturn_right = \"uturn-right\",\n  turn_right = \"turn-right\",\n  straight = \"straight\",\n  ramp_left = \"ramp-left\",\n  ramp_right = \"ramp-right\",\n  merge = \"merge\",\n  fork_left = \"fork-left\",\n  fork_right = \"fork-right\",\n  ferry = \"ferry\",\n  ferry_train = \"ferry-train\",\n  roundabout_left = \"roundabout-left\",\n  roundabout_right = \"roundabout-right\",\n}\n\n/**\n * Transit directions return additional information that is not relevant for other modes of transportation.\n * These additional properties are exposed through the `transit_details` object, returned as a field of an element in the `steps[]` array.\n * From the `TransitDetails` object you can access additional information about the transit stop, transit line and transit agency\n */\nexport interface TransitDetails {\n  /** contains information about the stop for this part of the trip. */\n  arrival_stop: TransitStop;\n  /** contains information about the station for this part of the trip. */\n  departure_stop: TransitStop;\n  /** contain the arrival time for this leg of the journey. */\n  arrival_time: Time;\n  /** contain the departure time for this leg of the journey. */\n  departure_time: Time;\n  /**\n   * specifies the direction in which to travel on this line, as it is marked on the vehicle or at the departure stop.\n   * This will often be the terminus station.\n   */\n  headsign: string;\n  /**\n   * specifies the expected number of seconds between departures from the same stop at this time.\n   * For example, with a `headway` value of 600, you would expect a ten minute wait if you should miss your bus.\n   */\n  headway: number;\n  /**\n   * contains the number of stops in this step, counting the arrival stop, but not the departure stop.\n   * For example, if your directions involve leaving from Stop A, passing through stops B and C, and arriving at stop D,\n   * `num_stops` will return 3.\n   */\n  num_stops: number;\n  /** contains information about the transit line used in this step. */\n  line: TransitLine;\n}\n\nexport interface TransitStop {\n  /** the name of the transit station/stop. eg. \"Union Square\". */\n  name: string;\n  /** the location of the transit station/stop, represented as a `lat` and `lng` field. */\n  location: LatLngLiteral;\n}\n\nexport interface TransitLine {\n  /** contains the full name of this transit line. eg. \"7 Avenue Express\". */\n  name: string;\n  /** contains the short name of this transit line. This will normally be a line number, such as \"M7\" or \"355\". */\n  short_name: string;\n  /** contains the color commonly used in signage for this transit line. The color will be specified as a hex string such as: #FF0033. */\n  color: string;\n  /**\n   * is an array containing a single `TransitAgency` object.\n   * The `TransitAgency` object provides information about the operator of the line\n   */\n  agencies: TransitAgency[];\n  /** contains the URL for this transit line as provided by the transit agency. */\n  url: string;\n  /** contains the URL for the icon associated with this line. */\n  icon: string;\n  /** contains the color of text commonly used for signage of this line. The color will be specified as a hex string. */\n  text_color: string;\n  /** contains the type of vehicle used on this line. */\n  vehicle: TransitVehicle;\n}\n\n/** You must display the names and URLs of the transit agencies servicing the trip results. */\nexport interface TransitAgency {\n  /** contains the name of the transit agency. */\n  name: string;\n  /** contains the phone number of the transit agency. */\n  phone: string;\n  /** contains the URL for the transit agency. */\n  url: string;\n}\n\nexport interface TransitVehicle {\n  /** contains the name of the vehicle on this line. eg. \"Subway.\". */\n  name: string;\n  /** contains the type of vehicle that runs on this line. */\n  type: VehicleType;\n  /** contains the URL for an icon associated with this vehicle type. */\n  icon: string;\n  /** contains the URL for the icon associated with this vehicle type, based on the local transport signage. */\n  local_icon: string;\n}\n\n/** @see https://developers.google.com/maps/documentation/directions/intro#VehicleType. */\nexport enum VehicleType {\n  /** Rail. */\n  RAIL = \"RAIL\",\n  /** Light rail transit. */\n  METRO_RAIL = \"METRO_RAIL\",\n  /** Underground light rail. */\n  SUBWAY = \"SUBWAY\",\n  /** Above ground light rail. */\n  TRAM = \"TRAM\",\n  /** Monorail. */\n  MONORAIL = \"MONORAIL\",\n  /** Heavy rail. */\n  HEAVY_RAIL = \"HEAVY_RAIL\",\n  /** Commuter rail. */\n  COMMUTER_TRAIN = \"COMMUTER_TRAIN\",\n  /** High speed train. */\n  HIGH_SPEED_TRAIN = \"HIGH_SPEED_TRAIN\",\n  /** Bus. */\n  BUS = \"BUS\",\n  /** Intercity bus. */\n  INTERCITY_BUS = \"INTERCITY_BUS\",\n  /** Trolleybus. */\n  TROLLEYBUS = \"TROLLEYBUS\",\n  /** Share taxi is a kind of bus with the ability to drop off and pick up passengers anywhere on its route. */\n  SHARE_TAXI = \"SHARE_TAXI\",\n  /** Ferry. */\n  FERRY = \"FERRY\",\n  /** A vehicle that operates on a cable, usually on the ground. Aerial cable cars may be of the type `GONDOLA_LIFT`. */\n  CABLE_CAR = \"CABLE_CAR\",\n  /** An aerial cable car. */\n  GONDOLA_LIFT = \"GONDOLA_LIFT\",\n  /**\n   * A vehicle that is pulled up a steep incline by a cable.\n   * A Funicular typically consists of two cars, with each car acting as a counterweight for the other.\n   */\n  FUNICULAR = \"FUNICULAR\",\n  /** All other vehicles will return this type. */\n  OTHER = \"OTHER\",\n}\n\n/**\n * When the Distance Matrix API returns results, it places them within a JSON `rows` array.\n * Even if no results are returned (such as when the origins and/or destinations don't exist), it still returns an empty array.\n * XML responses consist of zero or more `<row>` elements.\n *\n * Rows are ordered according to the values in the `origin` parameter of the request.\n * Each row corresponds to an origin, and each `element` within that row corresponds to a pairing of the origin with a `destination` value.\n *\n * Each `row` array contains one or more `element` entries, which in turn contain the information about a single origin-destination pairing.\n */\nexport interface DistanceMatrixRow {\n  elements: DistanceMatrixRowElement[];\n}\n\n/** The information about each origin-destination pairing is returned in an `element` entry. */\nexport interface DistanceMatrixRowElement {\n  /** possible status codes  */\n  status: Status;\n  /**\n   * The length of time it takes to travel this route, expressed in seconds (the `value` field) and as `text`.\n   * The textual representation is localized according to the query's `language` parameter.\n   */\n  duration: Duration;\n  /**\n   * The length of time it takes to travel this route, based on current and historical traffic conditions.\n   * See the `traffic_model` request parameter for the options you can use to request that the returned value is\n   * `optimistic`, `pessimistic`, or a `best-guess` estimate. The duration is expressed in seconds (the `value` field) and as `text`.\n   * The textual representation is localized according to the query's `language` parameter.\n   * The duration in traffic is returned only if all of the following are true:\n   *  - The request includes a `departure_time` parameter.\n   *  - The request includes a valid API key, or a valid Google Maps APIs Premium Plan client ID and signature.\n   *  - Traffic conditions are available for the requested route.\n   *  - The `mode` parameter is set to `driving`.\n   */\n  duration_in_traffic: Duration;\n  /**\n   * The total distance of this route, expressed in meters (`value`) and as `text`.\n   * The textual value uses the `unit` system specified with the unit parameter of the original request, or the origin's region.\n   */\n  distance: Distance;\n  /**\n   * If present, contains the total fare (that is, the total ticket costs) on this route.\n   * This property is only returned for transit requests and only for transit providers where fare information is available.\n   */\n  fare: TransitFare;\n}\n\nexport interface OpeningHours {\n  /** is a boolean value indicating if the place is open at the current time. */\n  open_now: boolean;\n  /** is an array of opening periods covering seven days, starting from Sunday, in chronological order. */\n  periods: OpeningPeriod[];\n  /**\n   * is an array of seven strings representing the formatted opening hours for each day of the week.\n   * If a `language` parameter was specified in the Place Details request, the Places Service will format\n   * and localize the opening hours appropriately for that language. The ordering of the elements in this array\n   * depends on the `language` parameter. Some languages start the week on Monday while others start on Sunday.\n   */\n  weekday_text: string[];\n}\n\nexport interface OpeningPeriod {\n  /** contains a pair of day and time objects describing when the place opens. */\n  open: OpeningHoursTime;\n  /**\n   * may contain a pair of day and time objects describing when the place closes.\n   * **Note:** If a place is **always open**, the `close` section will be missing from the response.\n   * Clients can rely on always-open being represented as an `open` period containing `day` with value 0\n   * and `time` with value 0000, and no `close`.\n   */\n  close?: OpeningHoursTime;\n}\n\nexport interface OpeningHoursTime {\n  /** a number from 0–6, corresponding to the days of the week, starting on Sunday. For example, 2 means Tuesday. */\n  day: number;\n  /**\n   *  may contain a time of day in 24-hour hhmm format. Values are in the range 0000–2359. The `time`\n   * will be reported in the place's time zone.\n   */\n  time?: string;\n}\n\nexport interface GeocodeResult {\n  /**\n   * array indicates the type of the returned result.\n   * This array contains a set of zero or more tags identifying the type of feature returned in the result.\n   * For example, a geocode of \"Chicago\" returns \"locality\" which indicates that \"Chicago\" is a city,\n   * and also returns \"political\" which indicates it is a political entity.\n   */\n  types: AddressType[];\n  /**\n   * is a string containing the human-readable address of this location.\n   *\n   * Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom,\n   * do not allow distribution of true postal addresses due to licensing restrictions.\n   *\n   * The formatted address is logically composed of one or more address components.\n   * For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\" (the street number),\n   * \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).\n   *\n   * Do not parse the formatted address programmatically. Instead you should use the individual address components,\n   * which the API response includes in addition to the formatted address field.\n   */\n  formatted_address: string;\n  /**\n   * is an array containing the separate components applicable to this address.\n   *\n   * Note the following facts about the `address_components[]` array:\n   *  - The array of address components may contain more components than the `formatted_address`.\n   *  - The array does not necessarily include all the political entities that contain an address,\n   *    apart from those included in the `formatted_address`. To retrieve all the political entities that contain a specific address,\n   *    you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request.\n   *  - The format of the response is not guaranteed to remain the same between requests.\n   *    In particular, the number of `address_components` varies based on the address requested and can change\n   *    over time for the same address. A component can change position in the array.\n   *    The type of the component can change. A particular component may be missing in a later response.\n   */\n  address_components: AddressComponent[];\n  /**\n   * is an array denoting all the localities contained in a postal code.\n   * This is only present when the result is a postal code that contains multiple localities.\n   */\n  postcode_localities: string[];\n  /** address geometry. */\n  geometry: AddressGeometry;\n  /**\n   * is an encoded location reference, derived from latitude and longitude coordinates,\n   * that represents an area: 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller.\n   * Plus codes can be used as a replacement for street addresses in places where they do not exist\n   * (where buildings are not numbered or streets are not named).\n   *\n   * The plus code is formatted as a global code and a compound code:\n   *  - `global_code` is a 4 character area code and 6 character or longer local code (849VCWC8+R9).\n   *  - `compound_code` is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA).\n   * Typically, both the global code and compound code are returned. However, if the result is in a remote location\n   * (for example, an ocean or desert) only the global code may be returned.\n   *\n   * @see [Open Location Code](https://en.wikipedia.org/wiki/Open_Location_Code)\n   * @see [plus codes](https://plus.codes/)\n   */\n  plus_code: PlusCode;\n  /**\n   * indicates that the geocoder did not return an exact match for the original request,\n   * though it was able to match part of the requested address.\n   * You may wish to examine the original request for misspellings and/or an incomplete address.\n   *\n   * Partial matches most often occur for street addresses that do not exist within the locality you pass in the request.\n   * Partial matches may also be returned when a request matches two or more locations in the same locality.\n   * For example, \"21 Henr St, Bristol, UK\" will return a partial match for both Henry Street and Henrietta Street.\n   * Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address.\n   * Suggestions triggered in this way will also be marked as a partial match.\n   */\n  partial_match: boolean;\n  /** is a unique identifier that can be used with other Google APIs. */\n  place_id: string;\n}\n\nexport enum GeocodingAddressComponentType {\n  /** indicates the floor of a building address. */\n  floor = \"floor\",\n  /** typically indicates a place that has not yet been categorized. */\n  establishment = \"establishment\",\n  /** indicates a named point of interest. */\n  point_of_interest = \"point_of_interest\",\n  /** indicates a parking lot or parking structure. */\n  parking = \"parking\",\n  /** indicates a specific postal box. */\n  post_box = \"post_box\",\n  /** indicates a grouping of geographic areas, such as locality and sublocality, used for mailing addresses in some countries. */\n  postal_town = \"postal_town\",\n  /** indicates the room of a building address. */\n  room = \"room\",\n  /** indicates the precise street number. */\n  street_number = \"street_number\",\n  /**  indicate the location of a bus. */\n  bus_station = \"bus_station\",\n  /**  indicate the location of a train. */\n  train_station = \"train_station\",\n  /**  indicate the location of a public transit stop. */\n  transit_station = \"transit_station\",\n}\n\nexport interface AddressComponent {\n  /** is an array indicating the *type* of the address component. */\n  types: Array<AddressType | GeocodingAddressComponentType>;\n  /** is the full text description or name of the address component as returned by the Geocoder. */\n  long_name: string;\n  /**\n   * is an abbreviated textual name for the address component, if available.\n   * For example, an address component for the state of Alaska may have a `long_name` of \"Alaska\" and a `short_name` of \"AK\"\n   * using the 2-letter postal abbreviation.\n   */\n  short_name: string;\n}\n\nexport interface AddressGeometry {\n  /** contains the geocoded latitude, longitude value. For normal address lookups, this field is typically the most important. */\n  location: LatLngLiteral;\n  /** stores additional data about the specified location. */\n  location_type?: LocationType;\n  /**\n   * contains the recommended viewport for displaying the returned result, specified as two latitude, longitude values\n   * defining the `southwest` and `northeast` corner of the viewport bounding box.\n   * Generally the viewport is used to frame a result when displaying it to a user.\n   */\n  viewport: LatLngBounds;\n  /**\n   * (optionally returned) stores the bounding box which can fully contain the returned result.\n   * Note that these bounds may not match the recommended viewport.\n   * (For example, San Francisco includes the [Farallon islands](https://en.wikipedia.org/wiki/Farallon_Islands),\n   * which are technically part of the city, but probably should not be returned in the viewport.)\n   */\n  bounds?: LatLngBounds;\n}\n\nexport enum LocationType {\n  /**\n   * indicates that the returned result is a precise geocode for which we have location information\n   * accurate down to street address precision\n   */\n  ROOFTOP = \"ROOFTOP\",\n  /**\n   * indicates that the returned result reflects an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n   */\n  RANGE_INTERPOLATED = \"RANGE_INTERPOLATED\",\n  /**\n   * indicates that the returned result is the geometric center of a result such as a polyline\n   * (for example, a street) or polygon (region).\n   */\n  GEOMETRIC_CENTER = \"GEOMETRIC_CENTER\",\n  /** indicates that the returned result is approximate. */\n  APPROXIMATE = \"APPROXIMATE\",\n}\n\nexport interface PlusCode {\n  /** is a 4 character area code and 6 character or longer local code (849VCWC8+R9). */\n  global_code: string;\n  /** is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA). */\n  compound_code: string;\n}\n\nexport enum RadioType {\n  lte = \"lte\",\n  gsm = \"gsm\",\n  cdma = \"cdma\",\n  wcdma = \"wcdma\",\n}\n\nexport interface CellTower {\n  /**\n   * Unique identifier of the cell.\n   * On GSM, this is the Cell ID (CID);\n   * CDMA networks use the Base Station ID (BID).\n   * WCDMA networks use the UTRAN/GERAN Cell Identity (UC-Id), which is a 32-bit value concatenating the Radio Network Controller (RNC)\n   * and Cell ID. Specifying only the 16-bit Cell ID value in WCDMA networks may return inaccurate results.\n   */\n  cellId: number;\n  /** The Location Area Code (LAC) for GSM and WCDMA networks. The Network ID (NID) for CDMA networks. */\n  locationAreaCode: number;\n  /** The cell tower's Mobile Country Code (MCC). */\n  mobileCountryCode: number;\n  /** The cell tower's Mobile Network Code. This is the MNC for GSM and WCDMA; CDMA uses the System ID (SID). */\n  mobileNetworkCode: number;\n  /** The number of milliseconds since this cell was primary. If age is 0, the `cellId` represents a current measurement. */\n  age?: number;\n  /** Radio signal strength measured in dBm. */\n  signalStrength?: number;\n  /** The [timing advance](https://en.wikipedia.org/wiki/Timing_advance) value. */\n  timingAdvance?: number;\n}\n\nexport interface WifiAccessPoint {\n  /** The MAC address of the WiFi node. It's typically called a BSS, BSSID or MAC address. Separators must be `:` (colon). */\n  macAddress: string;\n  /** The current signal strength measured in dBm. */\n  signalStrength?: number;\n  /** The number of milliseconds since this access point was detected. */\n  age?: number;\n  /** The channel over which the client is communicating with the acces. */\n  channel?: number;\n  /** The current signal to noise ratio measured in dB. */\n  signalToNoiseRatio?: number;\n}\n\nexport interface PredictionTerm {\n  /** containing the text of the term. */\n  value: string;\n  /** start position of this term in the description, measured in Unicode characters. */\n  offset: number;\n}\n\nexport interface PredictionSubstring {\n  /** location of the entered term. */\n  offset: number;\n  /** length of the entered term. */\n  length: number;\n}\n\nexport interface StructuredFormatting {\n  /** contains the main text of a prediction, usually the name of the place. */\n  main_text: string;\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  main_text_matched_substrings: PredictionSubstring[];\n  /** contains the secondary text of a prediction, usually the location of the place. */\n  secondary_text: string;\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result secondary text, so that the term can be highlighted if desired.\n   */\n  secondary_text_matched_substrings: PredictionSubstring[];\n}\n\nexport interface SnappedPoint {\n  /** Contains a `latitude` and `longitude` value. */\n  location: LatLngLiteralVerbose;\n  /**\n   * An integer that indicates the corresponding value in the original request.\n   * Each point in the request maps to at most two segmentsin the response:\n   *  - If there are no nearby roads, no segment is returned.\n   *  - If the nearest road is one-way, one segment is returned.\n   *  - If the nearest road is bidirectional, two segments are returned.\n   */\n  originalIndex: number;\n  /**\n   * A unique identifier for a place. All place IDs returned by the Roads API correspond to road segments.\n   * Place IDs can be used with other Google APIs, including the Places SDK and the Maps JavaScript API.\n   * For example, if you need to get road names for the snapped points returned by the Roads API,\n   * you can pass the `placeId` to the Places SDK or the Geocoding API. Within the Roads API,\n   * you can pass the `placeId` in a speed limits request to determine the speed limit along that road segment.\n   */\n  placeId: string;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}