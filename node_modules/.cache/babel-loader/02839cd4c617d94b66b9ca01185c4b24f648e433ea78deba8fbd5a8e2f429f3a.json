{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timezone = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst serialize_1 = require(\"./serialize\");\nconst client_1 = require(\"./client\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/timezone/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  timestamp: serialize_1.toTimestamp,\n  location: serialize_1.latLngToString\n}, exports.defaultUrl);\nfunction timezone(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.timezone = timezone;","map":{"version":3,"names":["serialize_1","require","client_1","exports","defaultUrl","defaultParamsSerializer","serializer","timestamp","toTimestamp","location","latLngToString","timezone","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/timezone.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Language, LatLng, RequestParams, ResponseData } from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface TimeZoneRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** a comma-separated `lat,lng` tuple (eg. `location=-33.86,151.20`), representing the location to look up. */\n    location: LatLng;\n    /**\n     * specifies the desired time as seconds since midnight, January 1, 1970 UTC.\n     * The Time Zone API uses the timestamp to determine whether or not Daylight Savings should be applied,\n     * based on the time zone of the location. Note that the API does not take historical time zones into account.\n     * That is, if you specify a past timestamp, the API does not take into account the possibility that\n     * the location was previously in a different time zone.\n     */\n    timestamp: Date | number;\n    /**\n     * The language in which to return results.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     *\n     * @default Language.English\n     */\n    language?: Language;\n  } & RequestParams;\n}\n\nexport interface TimeZoneResponseData extends ResponseData {\n  /**\n   * the offset for daylight-savings time in seconds.\n   * This will be zero if the time zone is not in Daylight Savings Time during the specified `timestamp`.\n   */\n  dstOffset: number;\n  /** the offset from UTC (in seconds) for the given location. This does not take into effect daylight savings. */\n  rawOffset: number;\n  /**\n   * a string containing the ID of the time zone, such as \"America/Los_Angeles\" or \"Australia/Sydney\".\n   * These IDs are defined by [Unicode Common Locale Data Repository (CLDR) project](http://cldr.unicode.org/),\n   * and currently available in file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml).\n   * When a timezone has several IDs, the canonical one is returned. In timezone.xml, this is the first alias of each timezone.\n   * For example, \"Asia/Calcutta\" is returned, not \"Asia/Kolkata\".\n   */\n  timeZoneId: string;\n  /**\n   * a string containing the long form name of the time zone.\n   * This field will be localized if the `language` parameter is set.\n   * eg. \"Pacific Daylight Time\" or \"Australian Eastern Daylight Time\"\n   */\n  timeZoneName: string;\n}\n\nexport interface TimeZoneResponse extends AxiosResponse {\n  data: TimeZoneResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/timezone/json\";\nexport const defaultParamsSerializer = serializer({\n  timestamp: toTimestamp,\n  location: latLngToString\n}, defaultUrl);\nexport function timezone(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: TimeZoneRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<TimeZoneResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<TimeZoneResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAoDaE,OAAA,CAAAC,UAAU,GAAG,oDAAoD;AACjED,OAAA,CAAAE,uBAAuB,GAAG,IAAAL,WAAA,CAAAM,UAAU,EAAC;EAChDC,SAAS,EAAEP,WAAA,CAAAQ,WAAW;EACtBC,QAAQ,EAAET,WAAA,CAAAU;CACX,EAAEP,OAAA,CAAAC,UAAU,CAAC;AACd,SAAgBO,QAAQA,CACtBC,EAMkB,EAClBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGb,OAAA,CAAAC,UAAU;MAChBa,gBAAgB,GAAGd,OAAA,CAAAE;IAAuB,IAAAO,EAE1B;IADbM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BX,QAAA,CAAAkB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EACoB;AACjC;AAjBAf,OAAA,CAAAQ,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}