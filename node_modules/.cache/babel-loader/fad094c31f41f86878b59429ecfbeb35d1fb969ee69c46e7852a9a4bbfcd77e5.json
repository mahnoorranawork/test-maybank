{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.placeAutocomplete = exports.defaultParamsSerializer = exports.defaultUrl = exports.PlaceAutocompleteType = void 0;\nconst serialize_1 = require(\"../serialize\");\nconst client_1 = require(\"../client\");\nvar PlaceAutocompleteType;\n(function (PlaceAutocompleteType) {\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results, rather than business results.\n   * Generally, you use this request to disambiguate results where the location specified may be indeterminate.\n   */\n  PlaceAutocompleteType[\"geocode\"] = \"geocode\";\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results with a precise address.\n   * Generally, you use this request when you know the user will be looking for a fully specified address.\n   */\n  PlaceAutocompleteType[\"address\"] = \"address\";\n  /** instructs the Place Autocomplete service to return only business results. */\n  PlaceAutocompleteType[\"establishment\"] = \"establishment\";\n  /**\n   * the `(regions)` type collection instructs the Places service to return any result matching the following types:\n   *  - `locality`\n   *  - `sublocality`\n   *  - `postal_code`\n   *  - `country`\n   *  - `administrative_area_level_1`\n   *  - `administrative_area_level_2`\n   */\n  PlaceAutocompleteType[\"regions\"] = \"(regions)\";\n  /** the (cities) type collection instructs the Places service to return results that match `locality` or `administrative_area_level_3`. */\n  PlaceAutocompleteType[\"cities\"] = \"(cities)\";\n})(PlaceAutocompleteType = exports.PlaceAutocompleteType || (exports.PlaceAutocompleteType = {}));\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/place/autocomplete/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  location: serialize_1.latLngToString,\n  origin: serialize_1.latLngToString\n}, exports.defaultUrl);\nfunction placeAutocomplete(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.placeAutocomplete = placeAutocomplete;","map":{"version":3,"names":["serialize_1","require","client_1","PlaceAutocompleteType","exports","defaultUrl","defaultParamsSerializer","serializer","location","latLngToString","origin","placeAutocomplete","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/places/autocomplete.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AddressType,\n  LatLng,\n  PredictionSubstring,\n  PredictionTerm,\n  RequestParams,\n  ResponseData,\n  StructuredFormatting\n} from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { latLngToString, serializer } from \"../serialize\";\n\nimport { defaultAxiosInstance } from \"../client\";\n\nexport enum PlaceAutocompleteType {\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results, rather than business results.\n   * Generally, you use this request to disambiguate results where the location specified may be indeterminate.\n   */\n  geocode = \"geocode\",\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results with a precise address.\n   * Generally, you use this request when you know the user will be looking for a fully specified address.\n   */\n  address = \"address\",\n  /** instructs the Place Autocomplete service to return only business results. */\n  establishment = \"establishment\",\n  /**\n   * the `(regions)` type collection instructs the Places service to return any result matching the following types:\n   *  - `locality`\n   *  - `sublocality`\n   *  - `postal_code`\n   *  - `country`\n   *  - `administrative_area_level_1`\n   *  - `administrative_area_level_2`\n   */\n  regions = \"(regions)\",\n  /** the (cities) type collection instructs the Places service to return results that match `locality` or `administrative_area_level_3`. */\n  cities = \"(cities)\",\n}\n\nexport interface PlaceAutocompleteRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The text string on which to search. The Place Autocomplete service will return candidate matches\n     * based on this string and order results based on their perceived relevance.\n     */\n    input: string;\n    /**\n     * A random string which identifies an autocomplete\n     * [session](https://developers.google.com/places/web-service/autocomplete#session_tokens) for billing purposes.\n     * If this parameter is omitted from an autocomplete request, the request is billed independently\n     */\n    sessiontoken?: string;\n    /**\n     * The position, in the input term, of the last character that the service uses to match predictions.\n     * For example, if the input is 'Google' and the `offset` is 3, the service will match on 'Goo'.\n     * The string determined by the `offset` is matched against the first word in the input term only.\n     * For example, if the input term is 'Google abc' and the offset is 3, the service will attempt to match against 'Goo abc'.\n     * If no `offset` is supplied, the service will use the whole term.\n     * The `offset` should generally be set to the position of the text caret.\n     */\n    offset?: number;\n    /**\n     * The origin point from which to calculate straight-line distance to the destination (returned as distance_meters).\n     * If this value is omitted, straight-line distance will not be returned.\n     */\n    origin?: LatLng;\n    /** The point around which you wish to retrieve place information. */\n    location?: LatLng;\n    /**\n     * The distance (in meters) within which to return place results. Note that setting a radius biases results to the indicated area,\n     * but may not fully restrict results to the specified area.\n     */\n    radius?: number;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking.\n     * See the list of supported languages and their codes.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     * If language is not supplied, the Place Autocomplete service will attempt to use the native language\n     * of the domain from which the request is sent.\n     */\n    language?: string;\n    /** The types of place results to return. */\n    types?: PlaceAutocompleteType;\n    /**\n     * A grouping of places to which you would like to restrict your results.\n     * Currently, you can use `components` to filter by up to 5 countries.\n     * Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code.\n     * For example: `components=country:fr` would restrict your results to places within France.\n     * Multiple countries must be passed as multiple `country:XX` filters, with the pipe character (`|`) as a separator.\n     * For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results\n     * to places within the United States and its unincorporated organized territories.\n     */\n    components?: string[];\n    /**\n     * Returns only those places that are strictly within the region defined by `location` and `radius`.\n     * This is a restriction, rather than a bias, meaning that results outside this region\n     * will not be returned even if they match the user input.\n     */\n    strictbounds?: boolean;\n    } & RequestParams;\n}\n\nexport interface PlaceAutocompleteResult {\n  /**\n   * contains the human-readable name for the returned result.\n   * For `establishment` results, this is usually the business name.\n   */\n  description: string;\n  /**\n   * contains an integer indicating the straight-line distance between the predicted place, and the specified origin point, in meters.\n   * This field is only returned when the origin point is specified in the request.\n   * This field is not returned in predictions of type route.\n   */\n  distance_meters?: number;\n  /**\n   * is a textual identifier that uniquely identifies a place.\n   * To retrieve information about the place, pass this identifier in the `placeId` field of a Places API request.\n   */\n  place_id: string;\n  /**\n   * contains an array of terms identifying each section of the returned description\n   * (a section of the description is generally terminated with a comma).\n   */\n  terms: PredictionTerm[];\n  /**\n   * contains an array of types that apply to this place.\n   * For example: `[ \"political\", \"locality\" ]` or `[ \"establishment\", \"geocode\" ]`.\n   */\n  types: AddressType[];\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  matched_substrings: PredictionSubstring[];\n  /** contains details on the prediction. */\n  structured_formatting: StructuredFormatting;\n}\n\nexport interface PlaceAutocompleteResponseData extends ResponseData {\n  /**\n   * contains an array of places, with information about the place.\n   * See [Place Autocomplete Results](https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)\n   * for information about these results. The Places API returns up to 5 results.\n   */\n  predictions: PlaceAutocompleteResult[];\n}\n\nexport interface PlaceAutocompleteResponse extends AxiosResponse {\n  data: PlaceAutocompleteResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/autocomplete/json\";\n\nexport const defaultParamsSerializer = serializer({\n  location: latLngToString,\n  origin: latLngToString\n}, defaultUrl);\n\nexport function placeAutocomplete(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlaceAutocompleteRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlaceAutocompleteResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<PlaceAutocompleteResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAEA,IAAYE,qBAyBX;AAzBD,WAAYA,qBAAqB;EAC/B;;;;EAIAA,qBAAA,uBAAmB;EACnB;;;;EAIAA,qBAAA,uBAAmB;EACnB;EACAA,qBAAA,mCAA+B;EAC/B;;;;;;;;;EASAA,qBAAA,yBAAqB;EACrB;EACAA,qBAAA,uBAAmB;AACrB,CAAC,EAzBWA,qBAAqB,GAArBC,OAAA,CAAAD,qBAAqB,KAArBC,OAAA,CAAAD,qBAAqB;AA4IpBC,OAAA,CAAAC,UAAU,GACrB,8DAA8D;AAEnDD,OAAA,CAAAE,uBAAuB,GAAG,IAAAN,WAAA,CAAAO,UAAU,EAAC;EAChDC,QAAQ,EAAER,WAAA,CAAAS,cAAc;EACxBC,MAAM,EAAEV,WAAA,CAAAS;CACT,EAAEL,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBM,iBAAiBA,CAC/BC,EAM2B,EAC3BC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGZ,OAAA,CAAAC,UAAU;MAChBY,gBAAgB,GAAGb,OAAA,CAAAE;IAAuB,IAAAM,EAEjB;IADtBM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BX,QAAA,CAAAkB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EAC6B;AAC1C;AAjBAd,OAAA,CAAAO,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}