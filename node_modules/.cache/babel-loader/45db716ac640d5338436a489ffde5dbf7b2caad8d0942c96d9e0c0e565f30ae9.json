{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.placePhoto = exports.defaultUrl = void 0;\nconst client_1 = require(\"../client\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/place/photo\";\nfunction placePhoto(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      responseType\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"responseType\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  if (!responseType) {\n    responseType = 'arraybuffer';\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    responseType\n  }, config));\n}\nexports.placePhoto = placePhoto;","map":{"version":3,"names":["client_1","require","exports","defaultUrl","placePhoto","_a","axiosInstance","params","method","url","responseType","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/places/photo.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { RequestParams } from \"../common\";\nimport { defaultAxiosInstance } from \"../client\";\n\nexport interface PlacePhotoRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * string identifier that uniquely identifies a photo.\n     * Photo references are returned from either a Place Search or Place Details request.\n     */\n    photoreference: string;\n    /**\n     * Specifies the maximum desired height or width, in pixels, of the image returned by the Place Photos service.\n     * If the image is smaller than the values specified, the original image will be returned.\n     * If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions,\n     * restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between 1 and 1600.\n     */\n    maxwidth?: number;\n    /**\n     * Specifies the maximum desired height or width, in pixels, of the image returned by the Place Photos service.\n     * If the image is smaller than the values specified, the original image will be returned.\n     * If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions,\n     * restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between 1 and 1600.\n     */\n    maxheight?: number;\n    } & RequestParams;\n  responseType: 'arraybuffer' | 'blob' | 'stream';\n}\n\n/**\n * The response of a successful Place Photo request will be an image.\n * The type of the image will depend upon the type of the originally submitted photo.\n *\n * If your request exceeds your available quota, the server will return an HTTP 403 status to indicate that the quota has been exceeded.\n *\n * If the server is unable to understand your request, it will return HTTP 400 status, which indicates an invalid request.\n *\n * The most common reasons why you might see an invalid request include:\n *  - The submitted photo reference was incorrectly specified.\n *  - Your request did not include either a `maxwidth` or `maxheight` parameter.\n */\nexport interface PlacePhotoResponse extends AxiosResponse {}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/place/photo\";\n\nexport function placePhoto(\n  { params, method = \"get\", url = defaultUrl, responseType, ...config }: PlacePhotoRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlacePhotoResponse> {\n  if (!responseType) {\n    responseType = 'arraybuffer'\n  }\n\n  return axiosInstance({\n    params,\n    method,\n    url,\n    responseType,\n    ...config\n  }) as Promise<PlacePhotoResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,QAAA,GAAAC,OAAA;AAyCaC,OAAA,CAAAC,UAAU,GAAG,kDAAkD;AAE5E,SAAgBC,UAAUA,CACxBC,EAAwF,EACxFC,aAAmD;MADnD;MAAEC,MAAM;MAAEC,MAAM,GAAG,KAAK;MAAEC,GAAG,GAAGP,OAAA,CAAAC,UAAU;MAAEO;IAAY,IAAAL,EAAgC;IAA3BM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EAAnE,2CAAqE,CAAF;EACnE,IAAAC,aAAA;IAAAA,aAAA,GAA+BN,QAAA,CAAAa,oBAAoB;EAAA;EAEnD,IAAI,CAACH,YAAY,EAAE;IACjBA,YAAY,GAAG,aAAa;;EAG9B,OAAOJ,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAY,GACTC,MAAM,EACsB;AACnC;AAfAT,OAAA,CAAAE,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}