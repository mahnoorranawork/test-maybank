{"ast":null,"code":"import axios from 'axios';\nexport const setPlace = place => {\n  return {\n    type: 'SET_PLACE',\n    payload: place\n  };\n};\nexport const addSearchHistory = search => {\n  return {\n    type: 'ADD_SEARCH_HISTORY',\n    payload: search\n  };\n};\n// placesActions.js\n\nexport const fetchPlaces = places => {\n  return dispatch => {\n    var _places$;\n    // You can perform any necessary preprocessing or data manipulation here before dispatching the action\n\n    // Assuming you are using a library like axios to make the API request\n    // Replace 'YOUR_API_KEY' with your actual Google Maps API key\n    const apiKey = 'YOUR_API_KEY';\n    const searchQuery = (_places$ = places[0]) === null || _places$ === void 0 ? void 0 : _places$.formatted_address; // Assuming you want to use the first place from the results\n\n    // Perform the API request to fetch places\n    axios.get(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=${searchQuery}&key=${apiKey}`).then(response => {\n      // Handle the response and extract the necessary data\n      const placesData = response.data.results.map(place => ({\n        name: place.name,\n        address: place.formatted_address\n        // Extract any other relevant information from the place object\n      }));\n\n      // Dispatch the action to store the fetched places in the Redux store\n      dispatch({\n        type: 'PLACES_FETCHED',\n        payload: placesData\n      });\n    }).catch(error => {\n      // Handle any errors that occurred during the API request\n      dispatch({\n        type: 'FETCH_PLACES_ERROR',\n        payload: error.message\n      });\n    });\n  };\n};","map":{"version":3,"names":["axios","setPlace","place","type","payload","addSearchHistory","search","fetchPlaces","places","dispatch","_places$","apiKey","searchQuery","formatted_address","get","then","response","placesData","data","results","map","name","address","catch","error","message"],"sources":["/home/mahnoor/google-place-autocomplete/src/redux/actions.js"],"sourcesContent":["import axios from 'axios'\n\nexport const setPlace = (place) => {\n    return {\n      type: 'SET_PLACE',\n      payload: place,\n    };\n  };\n  \n  export const addSearchHistory = (search) => {\n    return {\n      type: 'ADD_SEARCH_HISTORY',\n      payload: search,\n    };\n  };\n  // placesActions.js\n\nexport const fetchPlaces = (places) => {\n  return (dispatch) => {\n    // You can perform any necessary preprocessing or data manipulation here before dispatching the action\n\n    // Assuming you are using a library like axios to make the API request\n    // Replace 'YOUR_API_KEY' with your actual Google Maps API key\n    const apiKey = 'YOUR_API_KEY';\n    const searchQuery = places[0]?.formatted_address; // Assuming you want to use the first place from the results\n\n    // Perform the API request to fetch places\n    axios\n      .get(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=${searchQuery}&key=${apiKey}`)\n      .then((response) => {\n        // Handle the response and extract the necessary data\n        const placesData = response.data.results.map((place) => ({\n          name: place.name,\n          address: place.formatted_address,\n          // Extract any other relevant information from the place object\n        }));\n\n        // Dispatch the action to store the fetched places in the Redux store\n        dispatch({ type: 'PLACES_FETCHED', payload: placesData });\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the API request\n        dispatch({ type: 'FETCH_PLACES_ERROR', payload: error.message });\n      });\n  };\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC/B,OAAO;IACLC,IAAI,EAAE,WAAW;IACjBC,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,OAAO;IACLH,IAAI,EAAE,oBAAoB;IAC1BC,OAAO,EAAEE;EACX,CAAC;AACH,CAAC;AACD;;AAEF,OAAO,MAAMC,WAAW,GAAIC,MAAM,IAAK;EACrC,OAAQC,QAAQ,IAAK;IAAA,IAAAC,QAAA;IACnB;;IAEA;IACA;IACA,MAAMC,MAAM,GAAG,cAAc;IAC7B,MAAMC,WAAW,IAAAF,QAAA,GAAGF,MAAM,CAAC,CAAC,CAAC,cAAAE,QAAA,uBAATA,QAAA,CAAWG,iBAAiB,CAAC,CAAC;;IAElD;IACAb,KAAK,CACFc,GAAG,CAAE,oEAAmEF,WAAY,QAAOD,MAAO,EAAC,CAAC,CACpGI,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAI,CAACC,OAAO,CAACC,GAAG,CAAElB,KAAK,KAAM;QACvDmB,IAAI,EAAEnB,KAAK,CAACmB,IAAI;QAChBC,OAAO,EAAEpB,KAAK,CAACW;QACf;MACF,CAAC,CAAC,CAAC;;MAEH;MACAJ,QAAQ,CAAC;QAAEN,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEa;MAAW,CAAC,CAAC;IAC3D,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChB;MACAf,QAAQ,CAAC;QAAEN,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEoB,KAAK,CAACC;MAAQ,CAAC,CAAC;IAClE,CAAC,CAAC;EACN,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}