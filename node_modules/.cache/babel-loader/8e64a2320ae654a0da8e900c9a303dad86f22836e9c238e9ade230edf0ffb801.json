{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.distancematrix = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst serialize_1 = require(\"./serialize\");\nconst client_1 = require(\"./client\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  origins: o => o.map(serialize_1.latLngToString),\n  destinations: o => o.map(serialize_1.latLngToString),\n  arrival_time: serialize_1.toTimestamp,\n  departure_time: serialize_1.toTimestamp\n}, exports.defaultUrl);\nfunction distancematrix(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.distancematrix = distancematrix;","map":{"version":3,"names":["serialize_1","require","client_1","exports","defaultUrl","defaultParamsSerializer","serializer","origins","o","map","latLngToString","destinations","arrival_time","toTimestamp","departure_time","distancematrix","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/distance.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  DistanceMatrixRow,\n  LatLng,\n  RequestParams,\n  ResponseData,\n  TrafficModel,\n  TransitMode,\n  TransitRoutingPreference,\n  TravelMode,\n  TravelRestriction,\n  UnitSystem\n} from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface DistanceMatrixRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The starting point for calculating travel distance and time.\n     * You can supply one or more locations separated by the pipe character (`|`), in the form of an address, latitude/longitude coordinates,\n     * or a place ID:\n     *  - If you pass an address, the service geocodes the string and converts it to a latitude/longitude coordinate to calculate distance.\n     *    This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n     *\n     *    `origins=Bobcaygeon+ON|24+Sussex+Drive+Ottawa+ON`\n     *\n     *  - If you pass latitude/longitude coordinates, they are used unchanged to calculate distance.\n     *    Ensure that no space exists between the latitude and longitude values.\n     *\n     *    `origins=41.43206,-81.38992|-33.86748,151.20699`\n     *\n     *  - If you supply a place ID, you must prefix it with `place_id:`.\n     *    You can only specify a place ID if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     *    You can retrieve place IDs from the Geocoding API and the Places SDK (including Place Autocomplete).\n     *\n     *    `origins=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE`\n     *\n     *  - Alternatively, you can supply an encoded set of coordinates using the\n     *    [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).\n     *    This is particularly useful if you have a large number of origin points, because the URL is significantly shorter when using\n     *    an encoded polyline.\n     *\n     *     - Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). For example: `origins=enc:gfo}EtohhU:`\n     *     - You can also include multiple encoded polylines, separated by the pipe character (`|`).\n     *       For example: `origins=enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|enc:udymA{~bxM:`\n     */\n    origins: LatLng[];\n    /**\n     * One or more locations to use as the finishing point for calculating travel distance and time.\n     * The options for the destinations parameter are the same as for the origins parameter, described above.\n     */\n    destinations: LatLng[];\n    /**\n     * Specifies the mode of transport to use when calculating distance.\n     * Valid values and other request details are specified in the Travel Modes section of this document.\n     *\n     * @default TravelMode.driving\n     */\n    mode?: TravelMode;\n    /**\n     * The language in which to return results.\n     *  - If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal,\n     *    it returns street addresses in the local language, transliterated to a script readable by the user if necessary,\n     *    observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the API uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and t√©r are synonyms for street in Hungarian.\n     */\n    language?: string;\n    /**\n     * The region code, specified as a [ccTLD](https://en.wikipedia.org/wiki/CcTLD) (country code top-level domain) two-character value.\n     * Most ccTLD codes are identical to ISO 3166-1 codes, with some exceptions.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     * If more relevant results exist outside of the specified region, they may be included.\n     */\n    region?: string;\n    /**\n     * Introduces restrictions to the route. Valid values are specified in the Restrictions section of this document.\n     * Only one restriction can be specified.\n     */\n    avoid?: TravelRestriction[];\n    /** Specifies the unit system to use when expressing distance as text. */\n    units?: UnitSystem;\n    /**\n     * Specifies the desired time of arrival for transit requests, in seconds since midnight, January 1, 1970 UTC.\n     * You can specify either `departure_time` or `arrival_time`, but not both.\n     * Note that `arrival_time` must be specified as an integer.\n     */\n    arrival_time?: Date | number;\n    /**\n     * The desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC.\n     * Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second).\n     *\n     * The departure time may be specified in two cases:\n     *\n     *  - For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`.\n     *    If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n     *\n     *  - For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration\n     *    (response field: `duration_in_traffic`) that take traffic conditions into account.\n     *    This option is only available if the request contains a valid API key, or a valid\n     *    Google Maps APIs Premium Plan client ID and signature.\n     *    The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n     *\n     *    **Note:** Distance Matrix requests specifying `departure_time` when `mode=driving` are limited\n     *    to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.\n     */\n    departure_time?: Date | number;\n    /**\n     * Specifies the assumptions to use when calculating time in traffic.\n     * This setting affects the value returned in the `duration_in_traffic` field in the response,\n     * which contains the predicted time in traffic based on historical averages.\n     * The `traffic_model` parameter may only be specified for requests where the travel mode is `driving`,\n     * and where the request includes a `departure_time`, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     *\n     * @default TrafficModel.best_guess\n     */\n    traffic_model?: TrafficModel;\n    /** Specifies one or more preferred modes of transit. This parameter may only be specified for requests where the `mode` is `transit`. */\n    transit_mode?: TransitMode[];\n    /**\n     * Specifies preferences for transit requests. Using this parameter, you can bias the options returned,\n     * rather than accepting the default best route chosen by the API.\n     * This parameter may only be specified for requests where the `mode` is `transit`.\n     */\n    transit_routing_preference?: TransitRoutingPreference;\n  } & RequestParams;\n}\n\nexport interface DistanceMatrixResponseData extends ResponseData {\n  origin_addresses: string[];\n  /**\n   * contains an array of addresses as returned by the API from your original request.\n   * As with origin_addresses, these are localized if appropriate.\n   */\n  destination_addresses: string[];\n  /** contains an array of elements, which in turn each contain a status, duration, and distance element. */\n  rows: DistanceMatrixRow[];\n}\n\nexport interface DistanceMatrixResponse extends AxiosResponse {\n  data: DistanceMatrixResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\nexport const defaultParamsSerializer = serializer({\n  origins: o => o.map(latLngToString),\n  destinations: o => o.map(latLngToString),\n  arrival_time: toTimestamp,\n  departure_time: toTimestamp\n}, defaultUrl);\n\nexport function distancematrix(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: DistanceMatrixRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<DistanceMatrixResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<DistanceMatrixResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAyIaE,OAAA,CAAAC,UAAU,GACrB,0DAA0D;AAE/CD,OAAA,CAAAE,uBAAuB,GAAG,IAAAL,WAAA,CAAAM,UAAU,EAAC;EAChDC,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAACT,WAAA,CAAAU,cAAc,CAAC;EACnCC,YAAY,EAAEH,CAAC,IAAIA,CAAC,CAACC,GAAG,CAACT,WAAA,CAAAU,cAAc,CAAC;EACxCE,YAAY,EAAEZ,WAAA,CAAAa,WAAW;EACzBC,cAAc,EAAEd,WAAA,CAAAa;CACjB,EAAEV,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBW,cAAcA,CAC5BC,EAMwB,EACxBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGjB,OAAA,CAAAC,UAAU;MAChBiB,gBAAgB,GAAGlB,OAAA,CAAAE;IAAuB,IAAAW,EAEpB;IADnBM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+Bf,QAAA,CAAAsB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EAC0B;AACvC;AAjBAnB,OAAA,CAAAY,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}