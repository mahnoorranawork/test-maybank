{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = exports.defaultAxiosInstance = exports.X_GOOG_MAPS_EXPERIENCE_ID = exports.acceptEncoding = exports.userAgent = exports.defaultTimeout = exports.defaultHttpsAgent = exports.version = void 0;\nconst rax = require(\"retry-axios\");\nconst directions_1 = require(\"./directions\");\nconst distance_1 = require(\"./distance\");\nconst elevation_1 = require(\"./elevation\");\nconst findplacefromtext_1 = require(\"./places/findplacefromtext\");\nconst geocode_1 = require(\"./geocode/geocode\");\nconst geolocate_1 = require(\"./geolocate\");\nconst nearestroads_1 = require(\"./roads/nearestroads\");\nconst autocomplete_1 = require(\"./places/autocomplete\");\nconst details_1 = require(\"./places/details\");\nconst photo_1 = require(\"./places/photo\");\nconst queryautocomplete_1 = require(\"./places/queryautocomplete\");\nconst placesnearby_1 = require(\"./places/placesnearby\");\nconst reversegeocode_1 = require(\"./geocode/reversegeocode\");\nconst snaptoroads_1 = require(\"./roads/snaptoroads\");\nconst textsearch_1 = require(\"./places/textsearch\");\nconst timezone_1 = require(\"./timezone\");\nconst axios_1 = require(\"axios\");\nconst agentkeepalive_1 = require(\"agentkeepalive\");\nconst adapter_1 = require(\"./adapter\");\n// Cannot be `import` as it's not under TS root dir\nexports.version = require(\"../package.json\").version;\nexports.defaultHttpsAgent = new agentkeepalive_1.HttpsAgent({\n  keepAlive: true\n});\nexports.defaultTimeout = 10000;\nexports.userAgent = `google-maps-services-node-${exports.version}`;\nexports.acceptEncoding = \"gzip\";\nexports.X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\nconst defaultConfig = {\n  timeout: exports.defaultTimeout,\n  httpsAgent: exports.defaultHttpsAgent,\n  adapter: adapter_1.customAdapter,\n  headers: {\n    \"User-Agent\": exports.userAgent,\n    \"Accept-Encoding\": exports.acceptEncoding\n  }\n};\nexports.defaultAxiosInstance = axios_1.default.create(defaultConfig);\nrax.attach(exports.defaultAxiosInstance);\n/**\n * Client is a light wrapper around API methods providing shared configuration for Axios\n * settings such as retry logic using the default retry-axios settings and gzip encoding.\n *\n * ### Instantiate with defaults\n * ```\n * const client = Client()\n * ```\n *\n * ### Instantiate with config\n * ```\n * const client = Client({config})\n * ```\n *\n * ### Instantiate with axiosInstance **Advanced**\n * ```\n * const axiosInstance = axios.create(config)\n * const client = Client({axiosInstance})\n * ```\n */\nclass Client {\n  constructor() {\n    let {\n      axiosInstance,\n      config,\n      experienceId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (axiosInstance && config) {\n      throw new Error(\"Provide one of axiosInstance or config.\");\n    }\n    if (axiosInstance) {\n      this.axiosInstance = axiosInstance;\n      this.axiosInstance.defaults.headers = Object.assign(Object.assign({}, defaultConfig.headers), this.axiosInstance.defaults.headers);\n    } else if (config) {\n      config = Object.assign(Object.assign({}, defaultConfig), config);\n      config.headers = Object.assign(Object.assign({}, defaultConfig.headers), config.headers || {});\n      this.axiosInstance = axios_1.default.create(config);\n      rax.attach(this.axiosInstance);\n    } else {\n      this.axiosInstance = exports.defaultAxiosInstance;\n    }\n    if (experienceId) {\n      this.setExperienceId(...experienceId);\n    }\n  }\n  setExperienceId() {\n    for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {\n      ids[_key] = arguments[_key];\n    }\n    this.experienceId = ids;\n    this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\",\");\n  }\n  clearExperienceId() {\n    this.experienceId = null;\n    this.clearExperienceIdHeader();\n  }\n  clearExperienceIdHeader() {\n    delete this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID];\n  }\n  getExperienceId() {\n    return this.experienceId;\n  }\n  directions(request) {\n    return (0, directions_1.directions)(request, this.axiosInstance);\n  }\n  distancematrix(request) {\n    return (0, distance_1.distancematrix)(request, this.axiosInstance);\n  }\n  elevation(request) {\n    return (0, elevation_1.elevation)(request, this.axiosInstance);\n  }\n  timezone(request) {\n    return (0, timezone_1.timezone)(request, this.axiosInstance);\n  }\n  geolocate(request) {\n    return (0, geolocate_1.geolocate)(request, this.axiosInstance);\n  }\n  /**\n   * An example use of this function.\n   *\n   * ```javascript\n   * import { Client } from '@googlemaps/google-maps-services-js';\n   *\n   * const args = {\n   *   params: {\n   *     key: '<your-api-key>',\n   *     address: 'Perth 4WD & Commercial Centre',\n   *   }\n   * };\n   * const client = new Client();\n   * client.geocode(args).then(gcResponse => {\n   *   const str = JSON.stringify(gcResponse.data.results[0]);\n   *   console.log(`First result is: ${str}`);)\n   * });\n   * ```\n   */\n  geocode(request) {\n    return (0, geocode_1.geocode)(request, this.axiosInstance);\n  }\n  reverseGeocode(request) {\n    return (0, reversegeocode_1.reverseGeocode)(request, this.axiosInstance);\n  }\n  placeAutocomplete(request) {\n    return (0, autocomplete_1.placeAutocomplete)(request, this.axiosInstance);\n  }\n  placeDetails(request) {\n    return (0, details_1.placeDetails)(request, this.axiosInstance);\n  }\n  findPlaceFromText(request) {\n    return (0, findplacefromtext_1.findPlaceFromText)(request, this.axiosInstance);\n  }\n  placePhoto(request) {\n    return (0, photo_1.placePhoto)(request, this.axiosInstance);\n  }\n  placesNearby(request) {\n    return (0, placesnearby_1.placesNearby)(request, this.axiosInstance);\n  }\n  placeQueryAutocomplete(request) {\n    return (0, queryautocomplete_1.placeQueryAutocomplete)(request, this.axiosInstance);\n  }\n  textSearch(request) {\n    return (0, textsearch_1.textSearch)(request, this.axiosInstance);\n  }\n  nearestRoads(request) {\n    return (0, nearestroads_1.nearestRoads)(request, this.axiosInstance);\n  }\n  snapToRoads(request) {\n    return (0, snaptoroads_1.snapToRoads)(request, this.axiosInstance);\n  }\n}\nexports.Client = Client;","map":{"version":3,"names":["rax","require","directions_1","distance_1","elevation_1","findplacefromtext_1","geocode_1","geolocate_1","nearestroads_1","autocomplete_1","details_1","photo_1","queryautocomplete_1","placesnearby_1","reversegeocode_1","snaptoroads_1","textsearch_1","timezone_1","axios_1","agentkeepalive_1","adapter_1","exports","version","defaultHttpsAgent","HttpsAgent","keepAlive","defaultTimeout","userAgent","acceptEncoding","X_GOOG_MAPS_EXPERIENCE_ID","defaultConfig","timeout","httpsAgent","adapter","customAdapter","headers","defaultAxiosInstance","default","create","attach","Client","constructor","axiosInstance","config","experienceId","arguments","length","undefined","Error","defaults","Object","assign","setExperienceId","_len","ids","Array","_key","join","clearExperienceId","clearExperienceIdHeader","getExperienceId","directions","request","distancematrix","elevation","timezone","geolocate","geocode","reverseGeocode","placeAutocomplete","placeDetails","findPlaceFromText","placePhoto","placesNearby","placeQueryAutocomplete","textSearch","nearestRoads","snapToRoads"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/client.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as rax from \"retry-axios\";\n\nimport {\n  DirectionsRequest,\n  DirectionsResponse,\n  directions,\n} from \"./directions\";\nimport {\n  DistanceMatrixRequest,\n  DistanceMatrixResponse,\n  distancematrix,\n} from \"./distance\";\nimport { ElevationRequest, ElevationResponse, elevation } from \"./elevation\";\nimport {\n  FindPlaceFromTextRequest,\n  FindPlaceFromTextResponse,\n  findPlaceFromText,\n} from \"./places/findplacefromtext\";\nimport { GeocodeRequest, GeocodeResponse, geocode } from \"./geocode/geocode\";\nimport { GeolocateRequest, GeolocateResponse, geolocate } from \"./geolocate\";\nimport {\n  NearestRoadsRequest,\n  NearestRoadsResponse,\n  nearestRoads,\n} from \"./roads/nearestroads\";\nimport {\n  PlaceAutocompleteRequest,\n  PlaceAutocompleteResponse,\n  placeAutocomplete,\n} from \"./places/autocomplete\";\nimport {\n  PlaceDetailsRequest,\n  PlaceDetailsResponse,\n  placeDetails,\n} from \"./places/details\";\nimport {\n  PlacePhotoRequest,\n  PlacePhotoResponse,\n  placePhoto,\n} from \"./places/photo\";\nimport {\n  PlaceQueryAutocompleteRequest,\n  PlaceQueryAutocompleteResponse,\n  placeQueryAutocomplete,\n} from \"./places/queryautocomplete\";\nimport {\n  PlacesNearbyRequest,\n  PlacesNearbyResponse,\n  placesNearby,\n} from \"./places/placesnearby\";\nimport {\n  ReverseGeocodeRequest,\n  ReverseGeocodeResponse,\n  reverseGeocode,\n} from \"./geocode/reversegeocode\";\nimport {\n  SnapToRoadsRequest,\n  SnapToRoadsResponse,\n  snapToRoads,\n} from \"./roads/snaptoroads\";\nimport {\n  TextSearchRequest,\n  TextSearchResponse,\n  textSearch,\n} from \"./places/textsearch\";\nimport { TimeZoneRequest, TimeZoneResponse, timezone } from \"./timezone\";\nimport axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nimport { HttpsAgent } from \"agentkeepalive\";\nimport { customAdapter } from \"./adapter\";\n\n// Cannot be `import` as it's not under TS root dir\nexport const version = require(\"../package.json\").version;\nexport const defaultHttpsAgent = new HttpsAgent({ keepAlive: true });\nexport const defaultTimeout = 10000;\nexport const userAgent = `google-maps-services-node-${version}`;\nexport const acceptEncoding = \"gzip\";\nexport const X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\n\nconst defaultConfig: AxiosRequestConfig = {\n  timeout: defaultTimeout,\n  httpsAgent: defaultHttpsAgent,\n  adapter: customAdapter,\n  headers: {\n    \"User-Agent\": userAgent,\n    \"Accept-Encoding\": acceptEncoding,\n  },\n};\n\nexport const defaultAxiosInstance = axios.create(defaultConfig);\nrax.attach(defaultAxiosInstance);\n\nexport type Config = {\n  raxConfig?: rax.RetryConfig;\n} & AxiosRequestConfig;\n\nexport interface ClientOptions {\n  /** AxiosInstance to be used by client. Provide one of axiosInstance or config. */\n  axiosInstance?: AxiosInstance;\n  /** Config used to create AxiosInstance. Provide one of axiosInstance or config. */\n  config?: Config;\n  experienceId?: string[];\n}\n/**\n * Client is a light wrapper around API methods providing shared configuration for Axios\n * settings such as retry logic using the default retry-axios settings and gzip encoding.\n *\n * ### Instantiate with defaults\n * ```\n * const client = Client()\n * ```\n *\n * ### Instantiate with config\n * ```\n * const client = Client({config})\n * ```\n *\n * ### Instantiate with axiosInstance **Advanced**\n * ```\n * const axiosInstance = axios.create(config)\n * const client = Client({axiosInstance})\n * ```\n */\nexport class Client {\n  private axiosInstance: AxiosInstance;\n  private experienceId: string[];\n\n  constructor({ axiosInstance, config, experienceId }: ClientOptions = {}) {\n    if (axiosInstance && config) {\n      throw new Error(\"Provide one of axiosInstance or config.\");\n    }\n\n    if (axiosInstance) {\n      this.axiosInstance = axiosInstance;\n      this.axiosInstance.defaults.headers = {\n        ...defaultConfig.headers,\n        ...this.axiosInstance.defaults.headers,\n      };\n    } else if (config) {\n      config = { ...defaultConfig, ...config };\n      config.headers = { ...defaultConfig.headers, ...(config.headers || {}) };\n      this.axiosInstance = axios.create(config);\n      rax.attach(this.axiosInstance);\n    } else {\n      this.axiosInstance = defaultAxiosInstance;\n    }\n\n    if (experienceId) {\n      this.setExperienceId(...experienceId);\n    }\n  }\n\n  setExperienceId(...ids: string[]) {\n    this.experienceId = ids;\n    this.axiosInstance.defaults.headers[X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\n      \",\"\n    );\n  }\n\n  clearExperienceId() {\n    this.experienceId = null;\n    this.clearExperienceIdHeader();\n  }\n\n  private clearExperienceIdHeader() {\n    delete this.axiosInstance.defaults.headers[X_GOOG_MAPS_EXPERIENCE_ID];\n  }\n\n  getExperienceId(): string[] {\n    return this.experienceId;\n  }\n\n  directions(request: DirectionsRequest): Promise<DirectionsResponse> {\n    return directions(request, this.axiosInstance);\n  }\n\n  distancematrix(\n    request: DistanceMatrixRequest\n  ): Promise<DistanceMatrixResponse> {\n    return distancematrix(request, this.axiosInstance);\n  }\n\n  elevation(request: ElevationRequest): Promise<ElevationResponse> {\n    return elevation(request, this.axiosInstance);\n  }\n\n  timezone(request: TimeZoneRequest): Promise<TimeZoneResponse> {\n    return timezone(request, this.axiosInstance);\n  }\n  geolocate(request: GeolocateRequest): Promise<GeolocateResponse> {\n    return geolocate(request, this.axiosInstance);\n  }\n  /**\n   * An example use of this function.\n   *\n   * ```javascript\n   * import { Client } from '@googlemaps/google-maps-services-js';\n   * \n   * const args = {\n   *   params: {\n   *     key: '<your-api-key>',\n   *     address: 'Perth 4WD & Commercial Centre',\n   *   }\n   * };\n   * const client = new Client();\n   * client.geocode(args).then(gcResponse => {\n   *   const str = JSON.stringify(gcResponse.data.results[0]);\n   *   console.log(`First result is: ${str}`);)\n   * });\n   * ```\n   */\n  geocode(request: GeocodeRequest): Promise<GeocodeResponse> {\n    return geocode(request, this.axiosInstance);\n  }\n\n  reverseGeocode(\n    request: ReverseGeocodeRequest\n  ): Promise<ReverseGeocodeResponse> {\n    return reverseGeocode(request, this.axiosInstance);\n  }\n\n  placeAutocomplete(\n    request: PlaceAutocompleteRequest\n  ): Promise<PlaceAutocompleteResponse> {\n    return placeAutocomplete(request, this.axiosInstance);\n  }\n\n  placeDetails(request: PlaceDetailsRequest): Promise<PlaceDetailsResponse> {\n    return placeDetails(request, this.axiosInstance);\n  }\n\n  findPlaceFromText(\n    request: FindPlaceFromTextRequest\n  ): Promise<FindPlaceFromTextResponse> {\n    return findPlaceFromText(request, this.axiosInstance);\n  }\n\n  placePhoto(request: PlacePhotoRequest): Promise<PlacePhotoResponse> {\n    return placePhoto(request, this.axiosInstance);\n  }\n\n  placesNearby(request: PlacesNearbyRequest): Promise<PlacesNearbyResponse> {\n    return placesNearby(request, this.axiosInstance);\n  }\n\n  placeQueryAutocomplete(\n    request: PlaceQueryAutocompleteRequest\n  ): Promise<PlaceQueryAutocompleteResponse> {\n    return placeQueryAutocomplete(request, this.axiosInstance);\n  }\n\n  textSearch(request: TextSearchRequest): Promise<TextSearchResponse> {\n    return textSearch(request, this.axiosInstance);\n  }\n  nearestRoads(request: NearestRoadsRequest): Promise<NearestRoadsResponse> {\n    return nearestRoads(request, this.axiosInstance);\n  }\n  snapToRoads(request: SnapToRoadsRequest): Promise<SnapToRoadsResponse> {\n    return snapToRoads(request, this.axiosInstance);\n  }\n}\n\nexport {\n  DirectionsRequest,\n  DirectionsResponse,\n  DistanceMatrixRequest,\n  DistanceMatrixResponse,\n  ElevationRequest,\n  ElevationResponse,\n  FindPlaceFromTextRequest,\n  FindPlaceFromTextResponse,\n  GeolocateRequest,\n  GeocodeRequest,\n  GeocodeResponse,\n  GeolocateResponse,\n  NearestRoadsRequest,\n  NearestRoadsResponse,\n  PlaceAutocompleteRequest,\n  PlaceAutocompleteResponse,\n  PlaceDetailsRequest,\n  PlaceDetailsResponse,\n  PlacePhotoRequest,\n  PlacePhotoResponse,\n  PlaceQueryAutocompleteRequest,\n  PlaceQueryAutocompleteResponse,\n  PlacesNearbyRequest,\n  PlacesNearbyResponse,\n  ReverseGeocodeRequest,\n  ReverseGeocodeResponse,\n  SnapToRoadsRequest,\n  SnapToRoadsResponse,\n  TextSearchRequest,\n  TextSearchResponse,\n  TimeZoneRequest,\n  TimeZoneResponse,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}