{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geolocate = exports.defaultUrl = exports.GeolocateErrorReason = void 0;\nconst client_1 = require(\"./client\");\nvar GeolocateErrorReason;\n(function (GeolocateErrorReason) {\n  /**\n   * You have exceeded your daily limit.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  GeolocateErrorReason[\"dailyLimitExceeded\"] = \"dailyLimitExceeded\";\n  /**\n   * Your API key is not valid for the Geolocate API. Please ensure that you've included the entire key,\n   * and that you've either purchased the API or have enabled billing and activated the API to obtain the free quota.\n   * Domain: usageLimits\n   * Code: 400\n   */\n  GeolocateErrorReason[\"keyInvalid\"] = \"keyInvalid\";\n  /**\n   * You have exceeded the requests per second per user limit that you configured in the Google Cloud Platform Console.\n   * This limit should be configured to prevent a single or small group of users from exhausting your daily quota,\n   * while still allowing reasonable access to all users.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  GeolocateErrorReason[\"userRateLimitExceeded\"] = \"userRateLimitExceeded\";\n  /**\n   * The request was valid, but no results were returned.\n   * Domain: geolocation\n   * Code: 404\n   */\n  GeolocateErrorReason[\"notFound\"] = \"notFound\";\n  /**\n   * The request body is not valid JSON. Refer to the Request Body section for details on each field.\n   * Domain: global\n   * Code: 400\n   */\n  GeolocateErrorReason[\"parseError\"] = \"parseError\";\n})(GeolocateErrorReason = exports.GeolocateErrorReason || (exports.GeolocateErrorReason = {}));\nexports.defaultUrl = \"https://www.googleapis.com/geolocation/v1/geolocate\";\nfunction geolocate(_a, axiosInstance) {\n  var {\n      params,\n      method = \"post\",\n      url = exports.defaultUrl\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url\n  }, config));\n}\nexports.geolocate = geolocate;","map":{"version":3,"names":["client_1","require","GeolocateErrorReason","exports","defaultUrl","geolocate","_a","axiosInstance","params","method","url","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/geolocate.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  CellTower,\n  LatLngLiteral,\n  RadioType,\n  RequestParams,\n  ResponseData,\n  WifiAccessPoint\n} from \"./common\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface GeolocateRequest extends Partial<AxiosRequestConfig> {\n  data: {\n    /** The mobile country code (MCC) for the device's home network. */\n    homeMobileCountryCode?: number;\n    /** The mobile network code (MNC) for the device's home network. */\n    homeMobileNetworkCode?: number;\n    /** The mobile radio type. While this field is optional, it should be included if a value is available, for more accurate results. */\n    radioType?: RadioType;\n    /** The carrier name. */\n    carrier?: string;\n    /**\n     * Specifies whether to fall back to IP geolocation if wifi and cell tower signals are not available.\n     * Defaults to `true`. Set `considerIp` to `false` to disable fall back.\n     */\n    considerIp?: boolean;\n    /** An array of cell tower objects. */\n    cellTowers?: CellTower[];\n    /** An array of WiFi access point objects. */\n    wifiAccessPoints?: WifiAccessPoint[];\n  };\n  params: {} & RequestParams;\n}\n\nexport interface GeolocateResponseData extends ResponseData {\n  /** The user's estimated latitude and longitude, in degrees. Contains one `lat` and one `lng` subfield. */\n  location: LatLngLiteral;\n  /** The accuracy of the estimated location, in meters. This represents the radius of a circle around the given location. */\n  accuracy: number;\n}\nexport interface GeolocateResponseSuccess extends AxiosResponse {\n  data: GeolocateResponseData;\n}\n\n/**\n * In the case of an error, a standard format error response body will be returned\n * and the HTTP status code will be set to an error status.\n */\nexport interface GeolocateResponseError extends AxiosResponse {\n  data: {\n    error: {\n      /** This is the same as the HTTP status of the response. */\n      code: number;\n      /** A short description of the error. */\n      message: string;\n      /**\n       * A list of errors which occurred. Each error contains an identifier for the type of error (the `reason`)\n       * and a short description (the `message`).\n       */\n      errors: {\n        domain: string;\n        reason: GeolocateErrorReason;\n        message: string;\n      }[];\n    };\n  };\n}\n\nexport enum GeolocateErrorReason {\n  /**\n   * You have exceeded your daily limit.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  dailyLimitExceeded = \"dailyLimitExceeded\",\n  /**\n   * Your API key is not valid for the Geolocate API. Please ensure that you've included the entire key,\n   * and that you've either purchased the API or have enabled billing and activated the API to obtain the free quota.\n   * Domain: usageLimits\n   * Code: 400\n   */\n  keyInvalid = \"keyInvalid\",\n  /**\n   * You have exceeded the requests per second per user limit that you configured in the Google Cloud Platform Console.\n   * This limit should be configured to prevent a single or small group of users from exhausting your daily quota,\n   * while still allowing reasonable access to all users.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  userRateLimitExceeded = \"userRateLimitExceeded\",\n  /**\n   * The request was valid, but no results were returned.\n   * Domain: geolocation\n   * Code: 404\n   */\n  notFound = \"notFound\",\n  /**\n   * The request body is not valid JSON. Refer to the Request Body section for details on each field.\n   * Domain: global\n   * Code: 400\n   */\n  parseError = \"parseError\",\n}\n\nexport type GeolocateResponse =\n  | GeolocateResponseSuccess\n  | GeolocateResponseError;\n\nexport const defaultUrl = \"https://www.googleapis.com/geolocation/v1/geolocate\";\n\nexport function geolocate(\n  { params, method = \"post\", url = defaultUrl, ...config }: GeolocateRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<GeolocateResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    ...config\n  }) as Promise<GeolocateResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAAA,QAAA,GAAAC,OAAA;AA2DA,IAAYC,oBAkCX;AAlCD,WAAYA,oBAAoB;EAC9B;;;;;EAKAA,oBAAA,6CAAyC;EACzC;;;;;;EAMAA,oBAAA,6BAAyB;EACzB;;;;;;;EAOAA,oBAAA,mDAA+C;EAC/C;;;;;EAKAA,oBAAA,yBAAqB;EACrB;;;;;EAKAA,oBAAA,6BAAyB;AAC3B,CAAC,EAlCWA,oBAAoB,GAApBC,OAAA,CAAAD,oBAAoB,KAApBC,OAAA,CAAAD,oBAAoB;AAwCnBC,OAAA,CAAAC,UAAU,GAAG,qDAAqD;AAE/E,SAAgBC,SAASA,CACvBC,EAA0E,EAC1EC,aAAmD;MADnD;MAAEC,MAAM;MAAEC,MAAM,GAAG,MAAM;MAAEC,GAAG,GAAGP,OAAA,CAAAC;IAAU,IAAAE,EAA+B;IAA1BK,MAAM,GAAAC,MAAA,CAAAN,EAAA,EAAtD,2BAAwD,CAAF;EACtD,IAAAC,aAAA;IAAAA,aAAA,GAA+BP,QAAA,CAAAa,oBAAoB;EAAA;EAEnD,OAAON,aAAa,CAAAO,MAAA,CAAAC,MAAA;IAClBP,MAAM;IACNC,MAAM;IACNC;EAAG,GACAC,MAAM,EACqB;AAClC;AAVAR,OAAA,CAAAE,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}