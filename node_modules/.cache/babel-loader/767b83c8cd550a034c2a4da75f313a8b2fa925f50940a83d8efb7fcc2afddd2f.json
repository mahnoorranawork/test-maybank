{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.directions = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst serialize_1 = require(\"./serialize\");\nconst client_1 = require(\"./client\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/directions/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  origin: serialize_1.latLngToString,\n  destination: serialize_1.latLngToString,\n  waypoints: o => o.map(serialize_1.latLngToString),\n  arrival_time: serialize_1.toTimestamp,\n  departure_time: serialize_1.toTimestamp\n}, exports.defaultUrl);\nfunction directions(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  const {\n    optimize\n  } = params;\n  // optimize is passed as the first of the waypoint pipe array\n  // &waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA\n  if (optimize) {\n    params.waypoints = [\"optimize:true\", ...params.waypoints];\n  }\n  delete params.optimize;\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.directions = directions;","map":{"version":3,"names":["serialize_1","require","client_1","exports","defaultUrl","defaultParamsSerializer","serializer","origin","latLngToString","destination","waypoints","o","map","arrival_time","toTimestamp","departure_time","directions","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","optimize","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/directions.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  DirectionsRoute,\n  GeocodedWaypoint,\n  Language,\n  LatLng,\n  RequestParams,\n  ResponseData,\n  TrafficModel,\n  TransitMode,\n  TransitRoutingPreference,\n  TravelMode,\n  TravelRestriction,\n  UnitSystem,\n} from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface DirectionsRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The address, textual latitude/longitude value, or place ID from which you wish to calculate directions.\n     *  - If you pass an address, the Directions service geocodes the string and converts it to a latitude/longitude coordinate\n     *    to calculate directions. This coordinate may be different from that returned by the Geocoding API, for example a building\n     *    entrance rather than its center.\n     *\n     *    `origin=24+Sussex+Drive+Ottawa+ON`\n     *\n     *  - If you pass coordinates, they are used unchanged to calculate directions. Ensure that no space exists between the latitude\n     *    and longitude values.\n     *\n     *    `origin=41.43206,-81.38992`\n     *\n     *  - Place IDs must be prefixed with `place_id:`. The place ID may only be specified if the request includes an API key or a\n     *    Google Maps APIs Premium Plan client ID. You can retrieve place IDs from the Geocoding API and the Places SDK\n     *    (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and\n     *    Directions](https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions).\n     *\n     *    `origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE`\n     */\n    origin: LatLng;\n    /**\n     * The address, textual latitude/longitude value, or place ID to which you wish to calculate directions.\n     * The options for the `destination` parameter are the same as for the `origin` parameter, described above\n     */\n    destination: LatLng;\n    /**\n     * Specifies the mode of transport to use when calculating directions\n     *\n     * @default TravelMode.driving\n     */\n    mode?: TravelMode;\n    /**\n     * Specifies an array of waypoints.\n     * Waypoints alter a route by routing it through the specified location(s).\n     * A waypoint is specified as a latitude/longitude coordinate, an encoded polyline, a place ID, or an address which will be geocoded.\n     * Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). Place IDs must be prefixed with `place_id:`.\n     * The place ID may only be specified if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     * Waypoints are only supported for driving, walking and bicycling directions.\n     */\n    waypoints?: (string | LatLng)[];\n    /**\n     * If set to `true`, specifies that the Directions service may provide more than one route alternative in the response.\n     * Note that providing route alternatives may increase the response time from the server.\n     */\n    alternatives?: boolean;\n    /** Indicates that the calculated route(s) should avoid the indicated features. */\n    avoid?: TravelRestriction[];\n    /**\n     * The language in which to return results.\n     *\n     *  - If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal,\n     *    it returns street addresses in the local language, transliterated to a script readable by the user if necessary,\n     *    observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the API uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and t√©r are synonyms for street in Hungarian.\n     */\n    language?: Language;\n    /** Specifies the unit system to use when displaying results. */\n    units?: UnitSystem;\n    /** Specifies the region code, specified as a ccTLD (\"top-level domain\") two-character value. */\n    region?: string;\n    /**\n     * Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC.\n     * You can specify either `departure_time` or `arrival_time`, but not both.\n     * Note that `arrival_time` must be specified as an integer.\n     */\n    arrival_time?: Date | number;\n    /**\n     * Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC.\n     * Alternatively, you can specify a value of `now`, which sets the departure time to the current time (correct to the nearest second).\n     *\n     * The departure time may be specified in two cases:\n     *  - For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`.\n     *    If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n     *  - For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration\n     *    (response field: `duration_in_traffic`) that take traffic conditions into account.\n     *    This option is only available if the request contains a valid API key, or a valid Google Maps APIs Premium Plan client ID\n     *    and signature. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n     */\n    departure_time?: Date | number | \"now\";\n    /**\n     * Specifies the assumptions to use when calculating time in traffic.\n     * This setting affects the value returned in the `duration_in_traffic` field in the response, which contains the predicted time\n     * in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions\n     * where the request includes a `departure_time`, and only if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     *\n     * The default value of `best_guess` will give the most useful predictions for the vast majority of use cases.\n     * It is possible the `best_guess` travel time prediction may be *shorter* than `optimistic`, or alternatively,\n     * *longer* than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n     *\n     * @default TrafficModel.best_guess\n     */\n    traffic_model?: TrafficModel;\n    /**\n     * Specifies one or more preferred modes of transit.\n     * This parameter may only be specified for transit directions, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     */\n    transit_mode?: TransitMode[];\n    /**\n     * Specifies preferences for transit routes.\n     * Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API.\n     * This parameter may only be specified for transit directions, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     */\n    transit_routing_preference?: TransitRoutingPreference;\n    /** Wherever to optimize the provided route by rearranging the waypoints in a more efficient order. */\n    optimize?: boolean;\n  } & RequestParams;\n}\nexport interface DirectionsResponseData extends ResponseData {\n  /**\n   * contains an array with details about the geocoding of origin, destination and waypoints.\n   *\n   * These details will not be present for waypoints specified as textual latitude/longitude values if the service returns no results.\n   * This is because such waypoints are only reverse geocoded to obtain their representative address after a route has been found.\n   * An empty JSON object will occupy the corresponding places in the `geocoded_waypoints` array.\n   */\n  geocoded_waypoints: GeocodedWaypoint[];\n  /**\n   * contains an array of routes from the origin to the destination.\n   *\n   * When the Directions API returns results, it places them within a (JSON) `routes` array. Even if the service returns no results\n   * (such as if the origin and/or destination doesn't exist) it still returns an empty `routes` array.\n   * (XML responses consist of zero or more `<route>` elements.)\n   *\n   * Each element of the `routes` array contains a single result from the specified origin and destination.\n   * This route may consist of one or more `legs` depending on whether any waypoints were specified.\n   * As well, the route also contains copyright and warning information which must be displayed to the user in addition to the\n   * routing information.\n   */\n  routes: DirectionsRoute[];\n  /**\n   * contains an array of available travel modes. This field is returned when a request specifies a travel `mode` and gets no results.\n   * The array contains the available travel modes in the countries of the given set of waypoints.\n   * This field is not returned if one or more of the waypoints are `via:` waypoints.\n   */\n  available_travel_modes: string[];\n}\n\nexport interface DirectionsResponse extends AxiosResponse {\n  data: DirectionsResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/directions/json\";\n\nexport const defaultParamsSerializer = serializer({\n  origin: latLngToString,\n  destination: latLngToString,\n  waypoints: (o) => o.map(latLngToString),\n  arrival_time: toTimestamp,\n  departure_time: toTimestamp,\n}, defaultUrl);\n\nexport function directions(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: DirectionsRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<DirectionsResponse> {\n  const { optimize } = params;\n\n  // optimize is passed as the first of the waypoint pipe array\n  // &waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA\n  if (optimize) {\n    params.waypoints = [\"optimize:true\", ...params.waypoints];\n  }\n\n  delete params.optimize;\n\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config,\n  }) as Promise<DirectionsResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AA2JaE,OAAA,CAAAC,UAAU,GACrB,sDAAsD;AAE3CD,OAAA,CAAAE,uBAAuB,GAAG,IAAAL,WAAA,CAAAM,UAAU,EAAC;EAChDC,MAAM,EAAEP,WAAA,CAAAQ,cAAc;EACtBC,WAAW,EAAET,WAAA,CAAAQ,cAAc;EAC3BE,SAAS,EAAGC,CAAC,IAAKA,CAAC,CAACC,GAAG,CAACZ,WAAA,CAAAQ,cAAc,CAAC;EACvCK,YAAY,EAAEb,WAAA,CAAAc,WAAW;EACzBC,cAAc,EAAEf,WAAA,CAAAc;CACjB,EAAEX,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBY,UAAUA,CACxBC,EAMoB,EACpBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGlB,OAAA,CAAAC,UAAU;MAChBkB,gBAAgB,GAAGnB,OAAA,CAAAE;IAAuB,IAAAY,EAExB;IADfM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BhB,QAAA,CAAAuB,oBAAoB;EAAA;EAEnD,MAAM;IAAEC;EAAQ,CAAE,GAAGP,MAAM;EAE3B;EACA;EACA,IAAIO,QAAQ,EAAE;IACZP,MAAM,CAACT,SAAS,GAAG,CAAC,eAAe,EAAE,GAAGS,MAAM,CAACT,SAAS,CAAC;;EAG3D,OAAOS,MAAM,CAACO,QAAQ;EAEtB,OAAOR,aAAa,CAAAS,MAAA,CAAAC,MAAA;IAClBT,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EACsB;AACnC;AA3BApB,OAAA,CAAAa,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}