{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.elevation = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst client_1 = require(\"./client\");\nconst serialize_1 = require(\"./serialize\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/elevation/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  locations: o => o.map(serialize_1.latLngToString),\n  path: o => o.map(serialize_1.latLngToString)\n}, exports.defaultUrl);\nfunction elevation(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.elevation = elevation;","map":{"version":3,"names":["client_1","require","serialize_1","exports","defaultUrl","defaultParamsSerializer","serializer","locations","o","map","latLngToString","path","elevation","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/elevation.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLng, LatLngLiteral, ResponseData, RequestParams } from \"./common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"./client\";\nimport { serializer, latLngToString } from \"./serialize\";\n\nexport interface PositionalElevationParams {\n  /**\n   * defines the location(s) on the earth from which to return elevation data.\n   * This parameter takes either a single location as a comma-separated {latitude,longitude} pair (e.g. \"40.714728,-73.998672\")\n   * or multiple latitude/longitude pairs passed as an array or as an encoded polyline.\n   */\n  locations: LatLng[];\n}\n\nexport interface SampledPathElevationParams {\n  /**\n   * defines a path on the earth for which to return elevation data. This parameter defines a\n   * set of two or more ordered pairs defining a path along the surface of the earth. This\n   * parameter must be used in conjunction with the samples parameter described below.\n   */\n  path: LatLng[];\n  /**\n   * specifies the number of sample points along a path for which to return elevation data.\n   * The samples parameter divides the given path into an ordered set of equidistant points\n   * along the path.\n   */\n  samples: number;\n}\n\nexport interface ElevationRequest extends Partial<AxiosRequestConfig> {\n  params: (PositionalElevationParams | SampledPathElevationParams) & RequestParams;\n}\nexport interface ElevationResponseData extends ResponseData {\n  results: {\n    /**\n     * A `location` element (containing `lat` and `lng` elements) of the position for which elevation data is being computed.\n     * Note that for path requests, the set of `location` elements will contain the sampled points along the path.\n     */\n    location: LatLngLiteral;\n    /** An `elevation` element indicating the elevation of the location in meters. */\n    elevation: number;\n    /**\n     * A `resolution` value, indicating the maximum distance between data points from which the elevation was interpolated, in meters.\n     * This property will be missing if the resolution is not known.\n     * Note that elevation data becomes more coarse (larger `resolution` values) when multiple points are passed.\n     * To obtain the most accurate elevation value for a point, it should be queried independently.\n     */\n    resolution: number;\n  }[];\n}\n\nexport interface ElevationResponse extends AxiosResponse {\n  data: ElevationResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/elevation/json\";\n\nexport const defaultParamsSerializer = serializer({\n  locations: o => o.map(latLngToString),\n  path: o => o.map(latLngToString)\n}, defaultUrl);\n\nexport function elevation(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: ElevationRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<ElevationResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<ElevationResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAoDaE,OAAA,CAAAC,UAAU,GAAG,qDAAqD;AAElED,OAAA,CAAAE,uBAAuB,GAAG,IAAAH,WAAA,CAAAI,UAAU,EAAC;EAChDC,SAAS,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAACP,WAAA,CAAAQ,cAAc,CAAC;EACrCC,IAAI,EAAEH,CAAC,IAAIA,CAAC,CAACC,GAAG,CAACP,WAAA,CAAAQ,cAAc;CAChC,EAAEP,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBQ,SAASA,CACvBC,EAMmB,EACnBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGd,OAAA,CAAAC,UAAU;MAChBc,gBAAgB,GAAGf,OAAA,CAAAE;IAAuB,IAAAQ,EAEzB;IADdM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+Bd,QAAA,CAAAqB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EACqB;AAClC;AAjBAhB,OAAA,CAAAS,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}