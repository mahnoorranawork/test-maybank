{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geocode = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst client_1 = require(\"../client\");\nconst serialize_1 = require(\"../serialize\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  bounds: serialize_1.latLngBoundsToString,\n  components: serialize_1.objectToString\n}, exports.defaultUrl);\nfunction geocode(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.geocode = geocode;","map":{"version":3,"names":["client_1","require","serialize_1","exports","defaultUrl","defaultParamsSerializer","serializer","bounds","latLngBoundsToString","components","objectToString","geocode","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/geocode/geocode.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLngBounds, GeocodeResult, ResponseData, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngBoundsToString, objectToString } from \"../serialize\";\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nexport interface GeocodeComponents {\n  /** matches `postal_code` and `postal_code_prefix`. */\n  postal_code?: string;\n  /**\n   * matches a country name or a two letter [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code.\n   * **Note:** The API follows the ISO standard for defining countries, and the filtering works best when using\n   * the corresponding ISO code of the country\n   */\n  country?: string;\n  /** matches the long or short name of a route. */\n  route?: string;\n  /** matches against `locality` and `sublocality` types. */\n  locality?: string;\n  /** matches all the administrative_area levels. */\n  administrative_area?: string;\n}\n\nexport interface GeocodeRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The place_id that you want to geocode. You can retrieve this information from Places API for example.\n     */\n    place_id?: string;\n    /**\n     * The street address that you want to geocode, in the format used by the national postal service of the country concerned.\n     * Additional address elements such as business names and unit, suite or floor numbers should be avoided.\n     */\n    address?: string;\n    /**\n     * The bounding box of the viewport within which to bias geocode results more prominently.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     */\n    bounds?: string | LatLngBounds;\n    /**\n     * The language in which to return results.\n     *  - If `language` is not supplied, the geocoder attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The geocoder does its best to provide a street address that is readable for both the user and locals.\n     *    To achieve that goal, it returns street addresses in the local language, transliterated to a script readable\n     *    by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the geocoder uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and t√©r are synonyms for street in Hungarian.\n     */\n    language?: string;\n    /**\n     * The region code, specified as a ccTLD (\"top-level domain\") two-character value.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     */\n    region?: string;\n    /**\n     * A components filter with elements separated by a pipe (`|`).\n     * The components filter is *required* if the request doesn't include an `address`.\n     * Each element in the components filter consists of a `component:value` pair, and fully restricts the results from the geocoder.\n     */\n    components?: string | GeocodeComponents;\n    } & RequestParams;\n}\n\nexport interface GeocodeResponseData extends ResponseData {\n  /**\n   * contains an array of geocoded address information and geometry information.\n   *\n   * Generally, only one entry in the `\"results\"` array is returned for address lookups,though the geocoder may return several results\n   * when address queries are ambiguous.\n   */\n  results: GeocodeResult[];\n}\n\nexport interface GeocodeResponse extends AxiosResponse {\n  data: GeocodeResponseData;\n}\n\nexport const defaultParamsSerializer = serializer({\n  bounds: latLngBoundsToString,\n  components: objectToString\n}, defaultUrl);\n\nexport function geocode(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: GeocodeRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<GeocodeResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<GeocodeResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAEaE,OAAA,CAAAC,UAAU,GAAG,mDAAmD;AA8EhED,OAAA,CAAAE,uBAAuB,GAAG,IAAAH,WAAA,CAAAI,UAAU,EAAC;EAChDC,MAAM,EAAEL,WAAA,CAAAM,oBAAoB;EAC5BC,UAAU,EAAEP,WAAA,CAAAQ;CACb,EAAEP,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBO,OAAOA,CACrBC,EAMiB,EACjBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGb,OAAA,CAAAC,UAAU;MAChBa,gBAAgB,GAAGd,OAAA,CAAAE;IAAuB,IAAAO,EAE3B;IADZM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+Bb,QAAA,CAAAoB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EACmB;AAChC;AAjBAf,OAAA,CAAAQ,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}