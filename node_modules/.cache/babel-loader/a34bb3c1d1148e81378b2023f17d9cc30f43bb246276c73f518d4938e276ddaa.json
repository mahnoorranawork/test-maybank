{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reverseGeocode = exports.defaultParamsSerializer = exports.defaultUrl = exports.ReverseGeocodingLocationType = void 0;\nconst serialize_1 = require(\"../serialize\");\nconst client_1 = require(\"../client\");\n/**\n * If both `result_type` and `location_type` filters are present then the API returns only those results that match both the\n * `result_type` and the `location_type` values. If none of the filter values are acceptable, the API returns `ZERO_RESULTS`.\n */\nvar ReverseGeocodingLocationType;\n(function (ReverseGeocodingLocationType) {\n  /** returns only the addresses for which Google has location information accurate down to street address precision. */\n  ReverseGeocodingLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n  /**\n   * returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n   */\n  ReverseGeocodingLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n  /** returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region). */\n  ReverseGeocodingLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n  /** returns only the addresses that are characterized as approximate. */\n  ReverseGeocodingLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n})(ReverseGeocodingLocationType = exports.ReverseGeocodingLocationType || (exports.ReverseGeocodingLocationType = {}));\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  latlng: serialize_1.latLngToString\n}, exports.defaultUrl);\nfunction reverseGeocode(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.reverseGeocode = reverseGeocode;","map":{"version":3,"names":["serialize_1","require","client_1","ReverseGeocodingLocationType","exports","defaultUrl","defaultParamsSerializer","serializer","latlng","latLngToString","reverseGeocode","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/geocode/reversegeocode.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AddressType, Language, LatLng, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { GeocodeResult, ResponseData } from \"../common\";\nimport { latLngToString, serializer } from \"../serialize\";\n\nimport { defaultAxiosInstance } from \"../client\";\n\n/**\n * If both `result_type` and `location_type` filters are present then the API returns only those results that match both the\n * `result_type` and the `location_type` values. If none of the filter values are acceptable, the API returns `ZERO_RESULTS`.\n */\nexport enum ReverseGeocodingLocationType {\n  /** returns only the addresses for which Google has location information accurate down to street address precision. */\n  ROOFTOP = \"ROOFTOP\",\n  /**\n   * returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n   */\n  RANGE_INTERPOLATED = \"RANGE_INTERPOLATED\",\n  /** returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region). */\n  GEOMETRIC_CENTER = \"GEOMETRIC_CENTER\",\n  /** returns only the addresses that are characterized as approximate. */\n  APPROXIMATE = \"APPROXIMATE\",\n}\n\nexport interface ReverseGeocodeRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** The latitude and longitude values specifying the location for which you wish to obtain the closest, human-readable address. */\n    latlng?: LatLng;\n    /**\n     * The place ID of the place for which you wish to obtain the human-readable address.\n     * The place ID is a unique identifier that can be used with other Google APIs.\n     * For example, you can use the `placeID` returned by the Roads API to get the address for a snapped point.\n     * The place ID may only be specified if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     */\n    place_id?: string;\n    /**\n     * The language in which to return results.\n     *  - Google often updates the supported languages, so this list may not be exhaustive.\n     *  - If `language` is not supplied, the geocoder attempts to use the preferred language as specified in the\n     *    `Accept-Language` header, or the native language of the domain from which the request is sent.\n     *  - The geocoder does its best to provide a street address that is readable for both the user and locals.\n     *    To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user\n     *    if necessary, observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the geocoder uses the closest match.\n     */\n    language?: Language;\n    /**\n     * A filter of one or more address types, separated by a pipe (`|`).\n     * If the parameter contains multiple address types, the API returns all addresses that match any of the types.\n     * A note about processing: The `result_type` parameter does not restrict the search to the specified address type(s).\n     * Rather, the `result_type` acts as a post-search filter: the API fetches all results for the specified `latlng`,\n     * then discards those results that do not match the specified address type(s).\n     * Note: This parameter is available only for requests that include an API key or a client ID.\n     */\n    result_type?: AddressType[];\n    /**\n     * A filter of one or more location types, separated by a pipe (`|`).\n     * If the parameter contains multiple location types, the API returns all addresses that match any of the types.\n     * A note about processing: The `location_type` parameter does not restrict the search to the specified location type(s).\n     * Rather, the `location_type` acts as a post-search filter: the API fetches all results for the specified `latlng`,\n     * then discards those results that do not match the specified location type(s).\n     * Note: This parameter is available only for requests that include an API key or a client ID.\n     */\n    location_type?: ReverseGeocodingLocationType[];\n    } & RequestParams;\n}\n\nexport interface ReverseGeocodeResponseData extends ResponseData {\n  /**\n   * contains an array of geocoded address information and geometry information.\n   *\n   * Generally, only one entry in the `\"results\"` array is returned for address lookups,though the geocoder may return several results\n   * when address queries are ambiguous.\n   */\n  results: GeocodeResult[];\n}\n\nexport interface ReverseGeocodeResponse extends AxiosResponse {\n  data: ReverseGeocodeResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nexport const defaultParamsSerializer = serializer({\n  latlng: latLngToString\n}, defaultUrl);\n\nexport function reverseGeocode(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: ReverseGeocodeRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<ReverseGeocodeResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<ReverseGeocodeResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAEA;;;;AAIA,IAAYE,4BAYX;AAZD,WAAYA,4BAA4B;EACtC;EACAA,4BAAA,uBAAmB;EACnB;;;;EAIAA,4BAAA,6CAAyC;EACzC;EACAA,4BAAA,yCAAqC;EACrC;EACAA,4BAAA,+BAA2B;AAC7B,CAAC,EAZWA,4BAA4B,GAA5BC,OAAA,CAAAD,4BAA4B,KAA5BC,OAAA,CAAAD,4BAA4B;AAwE3BC,OAAA,CAAAC,UAAU,GAAG,mDAAmD;AAEhED,OAAA,CAAAE,uBAAuB,GAAG,IAAAN,WAAA,CAAAO,UAAU,EAAC;EAChDC,MAAM,EAAER,WAAA,CAAAS;CACT,EAAEL,OAAA,CAAAC,UAAU,CAAC;AAEd,SAAgBK,cAAcA,CAC5BC,EAMwB,EACxBC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGX,OAAA,CAAAC,UAAU;MAChBW,gBAAgB,GAAGZ,OAAA,CAAAE;IAAuB,IAAAK,EAEpB;IADnBM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BV,QAAA,CAAAiB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EAC0B;AACvC;AAjBAb,OAAA,CAAAM,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}