{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.placeQueryAutocomplete = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst client_1 = require(\"../client\");\nconst serialize_1 = require(\"../serialize\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/place/queryautocomplete/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({\n  location: serialize_1.latLngToString\n}, exports.defaultUrl);\nfunction placeQueryAutocomplete(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.placeQueryAutocomplete = placeQueryAutocomplete;","map":{"version":3,"names":["client_1","require","serialize_1","exports","defaultUrl","defaultParamsSerializer","serializer","location","latLngToString","placeQueryAutocomplete","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/places/queryautocomplete.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LatLng,\n  Language,\n  Place,\n  ResponseData,\n  RequestParams,\n  PredictionTerm,\n  PredictionSubstring,\n  StructuredFormatting\n} from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngToString } from \"../serialize\";\n\nexport interface PlaceQueryAutocompleteRequest\n  extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The text string on which to search.\n     * The Places service will return candidate matches based on this string and order results based on their perceived relevance.\n     */\n    input: string;\n    /**\n     * The character position in the input term at which the service uses text for predictions.\n     * For example, if the input is 'Googl' and the completion point is 3, the service will match on 'Goo'.\n     * The offset should generally be set to the position of the text caret.\n     * If no offset is supplied, the service will use the entire term.\n     */\n    offset?: number;\n    /** The point around which you wish to retrieve place information. Must be specified as latitude,longitude. */\n    location?: LatLng;\n    /**\n     * The distance (in meters) within which to return place results.\n     * Note that setting a radius biases results to the indicated area, but may not fully restrict results to the specified area.\n     */\n    radius?: number;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking.\n     * If language is not supplied, the Places service will attempt to use the native language of the domain from which the request is sent.\n     */\n    language?: Language;\n  } & RequestParams;\n}\n\nexport interface PlaceQueryAutocompletePrediction {\n  /** contains the human-readable name for the returned result. For establishment results, this is usually the business name. */\n  description: string;\n  /**\n   * contains an array of terms identifying each section of the returned description\n   * (a section of the description is generally terminated with a comma).\n   */\n  terms: PredictionTerm[];\n  /**\n   * contains an `offset` value and a `length`.\n   * These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  matched_substrings: PredictionSubstring[];\n  structured_formatting?: StructuredFormatting[];\n  place_id?: string;\n  types?: string[];\n}\n\nexport interface PlaceQueryAutocompleteResponseData extends ResponseData {\n  /**\n   * contains an array of places, with information about the place.\n   * See [Place Autocomplete Results](https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)\n   * for information about these results. The Places API returns up to 5 results.\n   */\n  predictions: PlaceQueryAutocompletePrediction[];\n}\n\nexport interface PlaceQueryAutocompleteResponse extends AxiosResponse {\n  data: PlaceQueryAutocompleteResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/queryautocomplete/json\";\n\nexport const defaultParamsSerializer = serializer({ location: latLngToString }, defaultUrl);\n\nexport function placeQueryAutocomplete(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlaceQueryAutocompleteRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlaceQueryAutocompleteResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<PlaceQueryAutocompleteResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAgEaE,OAAA,CAAAC,UAAU,GACrB,mEAAmE;AAExDD,OAAA,CAAAE,uBAAuB,GAAG,IAAAH,WAAA,CAAAI,UAAU,EAAC;EAAEC,QAAQ,EAAEL,WAAA,CAAAM;AAAc,CAAE,EAAEL,OAAA,CAAAC,UAAU,CAAC;AAE3F,SAAgBK,sBAAsBA,CACpCC,EAMgC,EAChCC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGX,OAAA,CAAAC,UAAU;MAChBW,gBAAgB,GAAGZ,OAAA,CAAAE;IAAuB,IAAAK,EAEZ;IAD3BM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BX,QAAA,CAAAkB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EACkC;AAC/C;AAjBAb,OAAA,CAAAM,sBAAA,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}