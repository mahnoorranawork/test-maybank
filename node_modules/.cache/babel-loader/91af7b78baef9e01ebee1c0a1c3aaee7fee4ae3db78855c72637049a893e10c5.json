{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findPlaceFromText = exports.defaultParamsSerializer = exports.defaultUrl = void 0;\nconst client_1 = require(\"../client\");\nconst serialize_1 = require(\"../serialize\");\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json\";\nexports.defaultParamsSerializer = (0, serialize_1.serializer)({}, exports.defaultUrl, {\n  arrayFormat: \"comma\"\n});\nfunction findPlaceFromText(_a, axiosInstance) {\n  var {\n      params,\n      method = \"get\",\n      url = exports.defaultUrl,\n      paramsSerializer = exports.defaultParamsSerializer\n    } = _a,\n    config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n  if (axiosInstance === void 0) {\n    axiosInstance = client_1.defaultAxiosInstance;\n  }\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\nexports.findPlaceFromText = findPlaceFromText;","map":{"version":3,"names":["client_1","require","serialize_1","exports","defaultUrl","defaultParamsSerializer","serializer","arrayFormat","findPlaceFromText","_a","axiosInstance","params","method","url","paramsSerializer","config","__rest","defaultAxiosInstance","Object","assign"],"sources":["/home/mahnoor/google-place-autocomplete/node_modules/@googlemaps/google-maps-services-js/src/places/findplacefromtext.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Language, ResponseData, Place, PlaceInputType, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer } from \"../serialize\";\n\nexport interface FindPlaceFromTextRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** The text input specifying which place to search for (for example, a name, address, or phone number). */\n    input: string;\n    /** The type of input. This can be one of either `textQuery` or `phoneNumber`. */\n    inputtype: PlaceInputType;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking\n     */\n    language?: Language;\n    /**\n     * The fields specifying the types of place data to return.\n     *\n     * **Note:** If you omit the fields parameter from a Find Place request, only the place_id for the result will be returned.\n     */\n    fields?: string[];\n    /**\n     * Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing\n     * the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n     */\n    locationbias?: string;\n    } & RequestParams;\n}\n\nexport interface FindPlaceFromTextResponseData extends ResponseData {\n  candidates: Place[];\n}\n\nexport interface FindPlaceFromTextResponse extends AxiosResponse {\n  data: FindPlaceFromTextResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json\";\n\nexport const defaultParamsSerializer = serializer({}, defaultUrl, {arrayFormat: \"comma\"});\n\nexport function findPlaceFromText(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: FindPlaceFromTextRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<FindPlaceFromTextResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<FindPlaceFromTextResponse>;\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAmCaE,OAAA,CAAAC,UAAU,GACrB,mEAAmE;AAExDD,OAAA,CAAAE,uBAAuB,GAAG,IAAAH,WAAA,CAAAI,UAAU,EAAC,EAAE,EAAEH,OAAA,CAAAC,UAAU,EAAE;EAACG,WAAW,EAAE;AAAO,CAAC,CAAC;AAEzF,SAAgBC,iBAAiBA,CAC/BC,EAM2B,EAC3BC,aAAmD;MAPnD;MACEC,MAAM;MACNC,MAAM,GAAG,KAAK;MACdC,GAAG,GAAGV,OAAA,CAAAC,UAAU;MAChBU,gBAAgB,GAAGX,OAAA,CAAAE;IAAuB,IAAAI,EAEjB;IADtBM,MAAM,GAAAC,MAAA,CAAAP,EAAA,EALX,+CAMC,CADU;EAEX,IAAAC,aAAA;IAAAA,aAAA,GAA+BV,QAAA,CAAAiB,oBAAoB;EAAA;EAEnD,OAAOP,aAAa,CAAAQ,MAAA,CAAAC,MAAA;IAClBR,MAAM;IACNC,MAAM;IACNC,GAAG;IACHC;EAAgB,GACbC,MAAM,EAC6B;AAC1C;AAjBAZ,OAAA,CAAAK,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}